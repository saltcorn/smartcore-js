// prettier-ignore
/* eslint-disable */
// @ts-nocheck
/* auto-generated by NAPI-RS */

import { createRequire } from 'node:module'
const require = createRequire(import.meta.url)
const __dirname = new URL('.', import.meta.url).pathname

const { readFileSync } = require('node:fs')
let nativeBinding = null
const loadErrors = []

const isMusl = () => {
  let musl = false
  if (process.platform === 'linux') {
    musl = isMuslFromFilesystem()
    if (musl === null) {
      musl = isMuslFromReport()
    }
    if (musl === null) {
      musl = isMuslFromChildProcess()
    }
  }
  return musl
}

const isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-')

const isMuslFromFilesystem = () => {
  try {
    return readFileSync('/usr/bin/ldd', 'utf-8').includes('musl')
  } catch {
    return null
  }
}

const isMuslFromReport = () => {
  let report = null
  if (typeof process.report?.getReport === 'function') {
    process.report.excludeNetwork = true
    report = process.report.getReport()
  }
  if (!report) {
    return null
  }
  if (report.header && report.header.glibcVersionRuntime) {
    return false
  }
  if (Array.isArray(report.sharedObjects)) {
    if (report.sharedObjects.some(isFileMusl)) {
      return true
    }
  }
  return false
}

const isMuslFromChildProcess = () => {
  try {
    return require('child_process').execSync('ldd --version', { encoding: 'utf8' }).includes('musl')
  } catch (e) {
    // If we reach this case, we don't know if the system is musl or not, so is better to just fallback to false
    return false
  }
}

function requireNative() {
  if (process.env.NAPI_RS_NATIVE_LIBRARY_PATH) {
    try {
      return require(process.env.NAPI_RS_NATIVE_LIBRARY_PATH);
    } catch (err) {
      loadErrors.push(err)
    }
  } else if (process.platform === 'android') {
    if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.android-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-android-arm64')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-android-arm64/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./smartcore-js.android-arm-eabi.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-android-arm-eabi')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-android-arm-eabi/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Android ${process.arch}`))
    }
  } else if (process.platform === 'win32') {
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.win32-x64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-win32-x64-msvc')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-win32-x64-msvc/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'ia32') {
      try {
        return require('./smartcore-js.win32-ia32-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-win32-ia32-msvc')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-win32-ia32-msvc/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.win32-arm64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-win32-arm64-msvc')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-win32-arm64-msvc/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Windows: ${process.arch}`))
    }
  } else if (process.platform === 'darwin') {
    try {
      return require('./smartcore-js.darwin-universal.node')
    } catch (e) {
      loadErrors.push(e)
    }
    try {
      const binding = require('@saltcorn/smartcore-js-darwin-universal')
      const bindingPackageVersion = require('@saltcorn/smartcore-js-darwin-universal/package.json').version
      if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
        throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
      }
      return binding
    } catch (e) {
      loadErrors.push(e)
    }
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.darwin-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-darwin-x64')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-darwin-x64/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.darwin-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-darwin-arm64')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-darwin-arm64/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on macOS: ${process.arch}`))
    }
  } else if (process.platform === 'freebsd') {
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.freebsd-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-freebsd-x64')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-freebsd-x64/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.freebsd-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-freebsd-arm64')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-freebsd-arm64/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on FreeBSD: ${process.arch}`))
    }
  } else if (process.platform === 'linux') {
    if (process.arch === 'x64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-x64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          const binding = require('@saltcorn/smartcore-js-linux-x64-musl')
          const bindingPackageVersion = require('@saltcorn/smartcore-js-linux-x64-musl/package.json').version
          if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
            throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
          }
          return binding
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-x64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          const binding = require('@saltcorn/smartcore-js-linux-x64-gnu')
          const bindingPackageVersion = require('@saltcorn/smartcore-js-linux-x64-gnu/package.json').version
          if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
            throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
          }
          return binding
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-arm64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          const binding = require('@saltcorn/smartcore-js-linux-arm64-musl')
          const bindingPackageVersion = require('@saltcorn/smartcore-js-linux-arm64-musl/package.json').version
          if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
            throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
          }
          return binding
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-arm64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          const binding = require('@saltcorn/smartcore-js-linux-arm64-gnu')
          const bindingPackageVersion = require('@saltcorn/smartcore-js-linux-arm64-gnu/package.json').version
          if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
            throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
          }
          return binding
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-arm-musleabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          const binding = require('@saltcorn/smartcore-js-linux-arm-musleabihf')
          const bindingPackageVersion = require('@saltcorn/smartcore-js-linux-arm-musleabihf/package.json').version
          if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
            throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
          }
          return binding
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-arm-gnueabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          const binding = require('@saltcorn/smartcore-js-linux-arm-gnueabihf')
          const bindingPackageVersion = require('@saltcorn/smartcore-js-linux-arm-gnueabihf/package.json').version
          if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
            throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
          }
          return binding
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'loong64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-loong64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          const binding = require('@saltcorn/smartcore-js-linux-loong64-musl')
          const bindingPackageVersion = require('@saltcorn/smartcore-js-linux-loong64-musl/package.json').version
          if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
            throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
          }
          return binding
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-loong64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          const binding = require('@saltcorn/smartcore-js-linux-loong64-gnu')
          const bindingPackageVersion = require('@saltcorn/smartcore-js-linux-loong64-gnu/package.json').version
          if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
            throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
          }
          return binding
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'riscv64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-riscv64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          const binding = require('@saltcorn/smartcore-js-linux-riscv64-musl')
          const bindingPackageVersion = require('@saltcorn/smartcore-js-linux-riscv64-musl/package.json').version
          if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
            throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
          }
          return binding
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-riscv64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          const binding = require('@saltcorn/smartcore-js-linux-riscv64-gnu')
          const bindingPackageVersion = require('@saltcorn/smartcore-js-linux-riscv64-gnu/package.json').version
          if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
            throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
          }
          return binding
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'ppc64') {
      try {
        return require('./smartcore-js.linux-ppc64-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-linux-ppc64-gnu')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-linux-ppc64-gnu/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 's390x') {
      try {
        return require('./smartcore-js.linux-s390x-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-linux-s390x-gnu')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-linux-s390x-gnu/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Linux: ${process.arch}`))
    }
  } else if (process.platform === 'openharmony') {
    if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.openharmony-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-openharmony-arm64')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-openharmony-arm64/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.openharmony-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-openharmony-x64')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-openharmony-x64/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./smartcore-js.openharmony-arm.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        const binding = require('@saltcorn/smartcore-js-openharmony-arm')
        const bindingPackageVersion = require('@saltcorn/smartcore-js-openharmony-arm/package.json').version
        if (bindingPackageVersion !== '0.2.8' && process.env.NAPI_RS_ENFORCE_VERSION_CHECK && process.env.NAPI_RS_ENFORCE_VERSION_CHECK !== '0') {
          throw new Error(`Native binding package version mismatch, expected 0.2.8 but got ${bindingPackageVersion}. You can reinstall dependencies to fix this issue.`)
        }
        return binding
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on OpenHarmony: ${process.arch}`))
    }
  } else {
    loadErrors.push(new Error(`Unsupported OS: ${process.platform}, architecture: ${process.arch}`))
  }
}

nativeBinding = requireNative()

if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
  let wasiBinding = null
  let wasiBindingError = null
  try {
    wasiBinding = require('./smartcore-js.wasi.cjs')
    nativeBinding = wasiBinding
  } catch (err) {
    if (process.env.NAPI_RS_FORCE_WASI) {
      wasiBindingError = err
    }
  }
  if (!nativeBinding) {
    try {
      wasiBinding = require('@saltcorn/smartcore-js-wasm32-wasi')
      nativeBinding = wasiBinding
    } catch (err) {
      if (process.env.NAPI_RS_FORCE_WASI) {
        wasiBindingError.cause = err
        loadErrors.push(err)
      }
    }
  }
  if (process.env.NAPI_RS_FORCE_WASI === 'error' && !wasiBinding) {
    const error = new Error('WASI binding not found and NAPI_RS_FORCE_WASI is set to error')
    error.cause = wasiBindingError
    throw error
  }
}

if (!nativeBinding) {
  if (loadErrors.length > 0) {
    throw new Error(
      `Cannot find native binding. ` +
        `npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828). ` +
        'Please try `npm i` again after removing both package-lock.json and node_modules directory.',
      {
        cause: loadErrors.reduce((err, cur) => {
          cur.cause = err
          return cur
        }),
      },
    )
  }
  throw new Error(`Failed to load native binding`)
}

const { AccuracyF64, Accuracyf64, AccuracyI64, Accuracyi64, AccuracyU64, Accuracyu64, AUCF64, AUCf64, BernoulliNBF64BigU64, BernoulliNBF64Parameters, Boston, BreastCancer, CategoricalNBBigU64, CategoricalNBParameters, CrossValidationResult, dataset, Dataset, DatasetF64F64, DatasetF64F64JsVecRef, DatasetF64I64, DatasetF64I64JsVecRef, DatasetF64U64, DBSCANF32EuclidianF32Parameters, DBSCANF32I32EuclidianF32, DBSCANF32I32MahalanobisF32, DBSCANF32I32ManhattanF32, DBSCANF32I32MinkowskiF32, DBSCANF32MahalanobisF32Parameters, DBSCANF32ManhattanF32Parameters, DBSCANF32MinkowskiF32Parameters, DBSCANF64EuclidianF64Parameters, DBSCANF64I32EuclidianF64, DBSCANF64I32MahalanobisF64, DBSCANF64I32ManhattanF64, DBSCANF64I32MinkowskiF64, DBSCANF64MahalanobisF64Parameters, DBSCANF64ManhattanF64Parameters, DBSCANF64MinkowskiF64Parameters, DBSCANI32EuclidianI32Parameters, DBSCANI32HammingI32Parameters, DBSCANI32I32EuclidianI32, DBSCANI32I32HammingI32, DBSCANI32I32ManhattanI32, DBSCANI32I32MinkowskiI32, DBSCANI32ManhattanI32Parameters, DBSCANI32MinkowskiI32Parameters, DBSCANI64EuclidianI64Parameters, DBSCANI64I32EuclidianI64, DBSCANI64I32ManhattanI64, DBSCANI64I32MinkowskiI64, DBSCANI64ManhattanI64Parameters, DBSCANI64MinkowskiI64Parameters, DBSCANU16EuclidianU16Parameters, DBSCANU16HammingU16Parameters, DBSCANU16I32EuclidianU16, DBSCANU16I32HammingU16, DBSCANU32EuclidianU32Parameters, DBSCANU32I32EuclidianU32, DBSCANU32I32ManhattanU32, DBSCANU32ManhattanU32Parameters, DBSCANU64EuclidianU64Parameters, DBSCANU64I32EuclidianU64, DBSCANU64I32ManhattanU64, DBSCANU64ManhattanU64Parameters, DBSCANU8EuclidianU8Parameters, DBSCANU8HammingU8Parameters, DBSCANU8I32EuclidianU8, DBSCANU8I32HammingU8, DecisionTreeClassifierI64I64, DecisionTreeClassifierParameters, DecisionTreeRegressorI64I64, DecisionTreeRegressorParameters, DenseMatrixF32, DenseMatrixF64, DenseMatrixI32, DenseMatrixI64, DenseMatrixU16, DenseMatrixU32, DenseMatrixU64, DenseMatrixU8, Diabetes, Digits, ElasticNetF64BigI64, ElasticNetF64BigU64, ElasticNetF64F64, ElasticNetF64I64, ElasticNetParameters, EuclidianF32, EuclidianF64, EuclidianI32, EuclidianI64, EuclidianU16, EuclidianU32, EuclidianU64, EuclidianU8, ExtraTreesRegressorF64BigI64, ExtraTreesRegressorF64BigU64, ExtraTreesRegressorF64F64, ExtraTreesRegressorF64I64, ExtraTreesRegressorParameters, F1F64, F1f64, GaussianNBF64BigU64, GaussianNBParameters, Generator, HammingI32, HammingU16, HammingU8, HCVScoreI64, HCVScorei64, HCVScoreU64, HCVScoreu64, Iris, JsBoxedArrayF32Ref, JsBoxedArrayF64Ref, JsBoxedArrayI32Ref, JsBoxedArrayI64Ref, JsBoxedArrayU16Ref, JsBoxedArrayU32Ref, JsBoxedArrayU8Ref, JsDenseMatrixF64Ref, JsVecF64Ref, JsVecI64Ref, Kernels, KFold, KMeansF32U32, KMeansF32U64, KMeansF64U32, KMeansF64U64, KMeansI32U32, KMeansI32U64, KMeansI64U32, KMeansI64U64, KMeansParameters, KMeansU32U32, KMeansU32U64, KMeansU64U32, KMeansU64U64, KNNClassifierF32EuclidianF32Parameters, KNNClassifierF32I32EuclidianF32, KNNClassifierF32I32MahalanobisF32, KNNClassifierF32I32ManhattanF32, KNNClassifierF32I32MinkowskiF32, KNNClassifierF32MahalanobisF32Parameters, KNNClassifierF32ManhattanF32Parameters, KNNClassifierF32MinkowskiF32Parameters, KNNClassifierF64EuclidianF64Parameters, KNNClassifierF64I32EuclidianF64, KNNClassifierF64I32MahalanobisF64, KNNClassifierF64I32ManhattanF64, KNNClassifierF64I32MinkowskiF64, KNNClassifierF64MahalanobisF64Parameters, KNNClassifierF64ManhattanF64Parameters, KNNClassifierF64MinkowskiF64Parameters, KNNClassifierI32EuclidianI32Parameters, KNNClassifierI32HammingI32Parameters, KNNClassifierI32I32EuclidianI32, KNNClassifierI32I32HammingI32, KNNClassifierI32I32ManhattanI32, KNNClassifierI32I32MinkowskiI32, KNNClassifierI32ManhattanI32Parameters, KNNClassifierI32MinkowskiI32Parameters, KNNClassifierI64EuclidianI64Parameters, KNNClassifierI64I32EuclidianI64, KNNClassifierI64I32ManhattanI64, KNNClassifierI64I32MinkowskiI64, KNNClassifierI64ManhattanI64Parameters, KNNClassifierI64MinkowskiI64Parameters, KNNClassifierU16EuclidianU16Parameters, KNNClassifierU16HammingU16Parameters, KNNClassifierU16I32EuclidianU16, KNNClassifierU16I32HammingU16, KNNClassifierU32EuclidianU32Parameters, KNNClassifierU32I32EuclidianU32, KNNClassifierU32I32ManhattanU32, KNNClassifierU32ManhattanU32Parameters, KNNClassifierU64EuclidianU64Parameters, KNNClassifierU64I32EuclidianU64, KNNClassifierU64I32ManhattanU64, KNNClassifierU64ManhattanU64Parameters, KNNClassifierU8EuclidianU8Parameters, KNNClassifierU8HammingU8Parameters, KNNClassifierU8I32EuclidianU8, KNNClassifierU8I32HammingU8, KNNRegressorF32EuclidianF32Parameters, KNNRegressorF32I32EuclidianF32, KNNRegressorF32I32MahalanobisF32, KNNRegressorF32I32ManhattanF32, KNNRegressorF32I32MinkowskiF32, KNNRegressorF32MahalanobisF32Parameters, KNNRegressorF32ManhattanF32Parameters, KNNRegressorF32MinkowskiF32Parameters, KNNRegressorF64EuclidianF64Parameters, KNNRegressorF64I32EuclidianF64, KNNRegressorF64I32MahalanobisF64, KNNRegressorF64I32ManhattanF64, KNNRegressorF64I32MinkowskiF64, KNNRegressorF64MahalanobisF64Parameters, KNNRegressorF64ManhattanF64Parameters, KNNRegressorF64MinkowskiF64Parameters, KNNRegressorI32EuclidianI32Parameters, KNNRegressorI32HammingI32Parameters, KNNRegressorI32I32EuclidianI32, KNNRegressorI32I32HammingI32, KNNRegressorI32I32ManhattanI32, KNNRegressorI32I32MinkowskiI32, KNNRegressorI32ManhattanI32Parameters, KNNRegressorI32MinkowskiI32Parameters, KNNRegressorI64EuclidianI64Parameters, KNNRegressorI64I32EuclidianI64, KNNRegressorI64I32ManhattanI64, KNNRegressorI64I32MinkowskiI64, KNNRegressorI64ManhattanI64Parameters, KNNRegressorI64MinkowskiI64Parameters, KNNRegressorU16EuclidianU16Parameters, KNNRegressorU16HammingU16Parameters, KNNRegressorU16I32EuclidianU16, KNNRegressorU16I32HammingU16, KNNRegressorU32EuclidianU32Parameters, KNNRegressorU32I32EuclidianU32, KNNRegressorU32I32ManhattanU32, KNNRegressorU32ManhattanU32Parameters, KNNRegressorU64EuclidianU64Parameters, KNNRegressorU64I32EuclidianU64, KNNRegressorU64I32ManhattanU64, KNNRegressorU64ManhattanU64Parameters, KNNRegressorU8EuclidianU8Parameters, KNNRegressorU8HammingU8Parameters, KNNRegressorU8I32EuclidianU8, KNNRegressorU8I32HammingU8, LassoF64BigI64, LassoF64BigU64, LassoF64F64, LassoF64I64, LassoParameters, LinearRegressionF64BigI64, LinearRegressionF64BigU64, LinearRegressionF64F64, LinearRegressionF64I64, LinearRegressionParameters, LogisticRegressionF64BigI64, LogisticRegressionF64BigU64, LogisticRegressionF64I64, LogisticRegressionParametersF64, MahalanobisF32, MahalanobisF64, ManhattanF32, ManhattanF64, ManhattanI32, ManhattanI64, ManhattanU32, ManhattanU64, MeanAbsoluteErrorF64, MeanAbsoluteErrorf64, MeanSquareErrorF64, MeanSquareErrorf64, MinkowskiF32, MinkowskiF64, MinkowskiI32, MinkowskiI64, MultinomialNBParameters, MultinomialNBU64BigU64, OneHotEncoderF64, OneHotEncoderParameters, PCAF64, PCAParameters, PrecisionF64, Precisionf64, R2F64, R2f64, R2I64, R2i64, R2U64, R2u64, RandomForestClassifierF64BigI64, RandomForestClassifierF64BigU64, RandomForestClassifierF64I64, RandomForestClassifierParameters, RandomForestRegressorF64BigI64, RandomForestRegressorF64BigU64, RandomForestRegressorF64F64, RandomForestRegressorF64I64, RandomForestRegressorParameters, RecallF64, Recallf64, RidgeRegressionF64BigI64, RidgeRegressionF64BigU64, RidgeRegressionF64F64, RidgeRegressionF64I64, RidgeRegressionF64Parameters, StandardScalerF64, StandardScalerParameters, SVCF64I64, SVCParametersF64I64, SVDF64, SVDF64DenseMatrixF64, SVDParameters, SVRF64, SVRParametersF64, VecF64, VecI64, crossValidateElasticNetF64F64, crossValidateElasticNetF64I64, crossValidateLogisticRegressionF64I64, KNNAlgorithmName, KNNWeightFunction, LinearRegressionSolverName, LogisticRegressionSolverName, RidgeRegressionSolverName, SplitCriterion, trainTestSplitF64BigI64, trainTestSplitF64BigU64, trainTestSplitF64F64, trainTestSplitF64I64 } = nativeBinding
export { AccuracyF64 }
export { Accuracyf64 }
export { AccuracyI64 }
export { Accuracyi64 }
export { AccuracyU64 }
export { Accuracyu64 }
export { AUCF64 }
export { AUCf64 }
export { BernoulliNBF64BigU64 }
export { BernoulliNBF64Parameters }
export { Boston }
export { BreastCancer }
export { CategoricalNBBigU64 }
export { CategoricalNBParameters }
export { CrossValidationResult }
export { dataset }
export { Dataset }
export { DatasetF64F64 }
export { DatasetF64F64JsVecRef }
export { DatasetF64I64 }
export { DatasetF64I64JsVecRef }
export { DatasetF64U64 }
export { DBSCANF32EuclidianF32Parameters }
export { DBSCANF32I32EuclidianF32 }
export { DBSCANF32I32MahalanobisF32 }
export { DBSCANF32I32ManhattanF32 }
export { DBSCANF32I32MinkowskiF32 }
export { DBSCANF32MahalanobisF32Parameters }
export { DBSCANF32ManhattanF32Parameters }
export { DBSCANF32MinkowskiF32Parameters }
export { DBSCANF64EuclidianF64Parameters }
export { DBSCANF64I32EuclidianF64 }
export { DBSCANF64I32MahalanobisF64 }
export { DBSCANF64I32ManhattanF64 }
export { DBSCANF64I32MinkowskiF64 }
export { DBSCANF64MahalanobisF64Parameters }
export { DBSCANF64ManhattanF64Parameters }
export { DBSCANF64MinkowskiF64Parameters }
export { DBSCANI32EuclidianI32Parameters }
export { DBSCANI32HammingI32Parameters }
export { DBSCANI32I32EuclidianI32 }
export { DBSCANI32I32HammingI32 }
export { DBSCANI32I32ManhattanI32 }
export { DBSCANI32I32MinkowskiI32 }
export { DBSCANI32ManhattanI32Parameters }
export { DBSCANI32MinkowskiI32Parameters }
export { DBSCANI64EuclidianI64Parameters }
export { DBSCANI64I32EuclidianI64 }
export { DBSCANI64I32ManhattanI64 }
export { DBSCANI64I32MinkowskiI64 }
export { DBSCANI64ManhattanI64Parameters }
export { DBSCANI64MinkowskiI64Parameters }
export { DBSCANU16EuclidianU16Parameters }
export { DBSCANU16HammingU16Parameters }
export { DBSCANU16I32EuclidianU16 }
export { DBSCANU16I32HammingU16 }
export { DBSCANU32EuclidianU32Parameters }
export { DBSCANU32I32EuclidianU32 }
export { DBSCANU32I32ManhattanU32 }
export { DBSCANU32ManhattanU32Parameters }
export { DBSCANU64EuclidianU64Parameters }
export { DBSCANU64I32EuclidianU64 }
export { DBSCANU64I32ManhattanU64 }
export { DBSCANU64ManhattanU64Parameters }
export { DBSCANU8EuclidianU8Parameters }
export { DBSCANU8HammingU8Parameters }
export { DBSCANU8I32EuclidianU8 }
export { DBSCANU8I32HammingU8 }
export { DecisionTreeClassifierI64I64 }
export { DecisionTreeClassifierParameters }
export { DecisionTreeRegressorI64I64 }
export { DecisionTreeRegressorParameters }
export { DenseMatrixF32 }
export { DenseMatrixF64 }
export { DenseMatrixI32 }
export { DenseMatrixI64 }
export { DenseMatrixU16 }
export { DenseMatrixU32 }
export { DenseMatrixU64 }
export { DenseMatrixU8 }
export { Diabetes }
export { Digits }
export { ElasticNetF64BigI64 }
export { ElasticNetF64BigU64 }
export { ElasticNetF64F64 }
export { ElasticNetF64I64 }
export { ElasticNetParameters }
export { EuclidianF32 }
export { EuclidianF64 }
export { EuclidianI32 }
export { EuclidianI64 }
export { EuclidianU16 }
export { EuclidianU32 }
export { EuclidianU64 }
export { EuclidianU8 }
export { ExtraTreesRegressorF64BigI64 }
export { ExtraTreesRegressorF64BigU64 }
export { ExtraTreesRegressorF64F64 }
export { ExtraTreesRegressorF64I64 }
export { ExtraTreesRegressorParameters }
export { F1F64 }
export { F1f64 }
export { GaussianNBF64BigU64 }
export { GaussianNBParameters }
export { Generator }
export { HammingI32 }
export { HammingU16 }
export { HammingU8 }
export { HCVScoreI64 }
export { HCVScorei64 }
export { HCVScoreU64 }
export { HCVScoreu64 }
export { Iris }
export { JsBoxedArrayF32Ref }
export { JsBoxedArrayF64Ref }
export { JsBoxedArrayI32Ref }
export { JsBoxedArrayI64Ref }
export { JsBoxedArrayU16Ref }
export { JsBoxedArrayU32Ref }
export { JsBoxedArrayU8Ref }
export { JsDenseMatrixF64Ref }
export { JsVecF64Ref }
export { JsVecI64Ref }
export { Kernels }
export { KFold }
export { KMeansF32U32 }
export { KMeansF32U64 }
export { KMeansF64U32 }
export { KMeansF64U64 }
export { KMeansI32U32 }
export { KMeansI32U64 }
export { KMeansI64U32 }
export { KMeansI64U64 }
export { KMeansParameters }
export { KMeansU32U32 }
export { KMeansU32U64 }
export { KMeansU64U32 }
export { KMeansU64U64 }
export { KNNClassifierF32EuclidianF32Parameters }
export { KNNClassifierF32I32EuclidianF32 }
export { KNNClassifierF32I32MahalanobisF32 }
export { KNNClassifierF32I32ManhattanF32 }
export { KNNClassifierF32I32MinkowskiF32 }
export { KNNClassifierF32MahalanobisF32Parameters }
export { KNNClassifierF32ManhattanF32Parameters }
export { KNNClassifierF32MinkowskiF32Parameters }
export { KNNClassifierF64EuclidianF64Parameters }
export { KNNClassifierF64I32EuclidianF64 }
export { KNNClassifierF64I32MahalanobisF64 }
export { KNNClassifierF64I32ManhattanF64 }
export { KNNClassifierF64I32MinkowskiF64 }
export { KNNClassifierF64MahalanobisF64Parameters }
export { KNNClassifierF64ManhattanF64Parameters }
export { KNNClassifierF64MinkowskiF64Parameters }
export { KNNClassifierI32EuclidianI32Parameters }
export { KNNClassifierI32HammingI32Parameters }
export { KNNClassifierI32I32EuclidianI32 }
export { KNNClassifierI32I32HammingI32 }
export { KNNClassifierI32I32ManhattanI32 }
export { KNNClassifierI32I32MinkowskiI32 }
export { KNNClassifierI32ManhattanI32Parameters }
export { KNNClassifierI32MinkowskiI32Parameters }
export { KNNClassifierI64EuclidianI64Parameters }
export { KNNClassifierI64I32EuclidianI64 }
export { KNNClassifierI64I32ManhattanI64 }
export { KNNClassifierI64I32MinkowskiI64 }
export { KNNClassifierI64ManhattanI64Parameters }
export { KNNClassifierI64MinkowskiI64Parameters }
export { KNNClassifierU16EuclidianU16Parameters }
export { KNNClassifierU16HammingU16Parameters }
export { KNNClassifierU16I32EuclidianU16 }
export { KNNClassifierU16I32HammingU16 }
export { KNNClassifierU32EuclidianU32Parameters }
export { KNNClassifierU32I32EuclidianU32 }
export { KNNClassifierU32I32ManhattanU32 }
export { KNNClassifierU32ManhattanU32Parameters }
export { KNNClassifierU64EuclidianU64Parameters }
export { KNNClassifierU64I32EuclidianU64 }
export { KNNClassifierU64I32ManhattanU64 }
export { KNNClassifierU64ManhattanU64Parameters }
export { KNNClassifierU8EuclidianU8Parameters }
export { KNNClassifierU8HammingU8Parameters }
export { KNNClassifierU8I32EuclidianU8 }
export { KNNClassifierU8I32HammingU8 }
export { KNNRegressorF32EuclidianF32Parameters }
export { KNNRegressorF32I32EuclidianF32 }
export { KNNRegressorF32I32MahalanobisF32 }
export { KNNRegressorF32I32ManhattanF32 }
export { KNNRegressorF32I32MinkowskiF32 }
export { KNNRegressorF32MahalanobisF32Parameters }
export { KNNRegressorF32ManhattanF32Parameters }
export { KNNRegressorF32MinkowskiF32Parameters }
export { KNNRegressorF64EuclidianF64Parameters }
export { KNNRegressorF64I32EuclidianF64 }
export { KNNRegressorF64I32MahalanobisF64 }
export { KNNRegressorF64I32ManhattanF64 }
export { KNNRegressorF64I32MinkowskiF64 }
export { KNNRegressorF64MahalanobisF64Parameters }
export { KNNRegressorF64ManhattanF64Parameters }
export { KNNRegressorF64MinkowskiF64Parameters }
export { KNNRegressorI32EuclidianI32Parameters }
export { KNNRegressorI32HammingI32Parameters }
export { KNNRegressorI32I32EuclidianI32 }
export { KNNRegressorI32I32HammingI32 }
export { KNNRegressorI32I32ManhattanI32 }
export { KNNRegressorI32I32MinkowskiI32 }
export { KNNRegressorI32ManhattanI32Parameters }
export { KNNRegressorI32MinkowskiI32Parameters }
export { KNNRegressorI64EuclidianI64Parameters }
export { KNNRegressorI64I32EuclidianI64 }
export { KNNRegressorI64I32ManhattanI64 }
export { KNNRegressorI64I32MinkowskiI64 }
export { KNNRegressorI64ManhattanI64Parameters }
export { KNNRegressorI64MinkowskiI64Parameters }
export { KNNRegressorU16EuclidianU16Parameters }
export { KNNRegressorU16HammingU16Parameters }
export { KNNRegressorU16I32EuclidianU16 }
export { KNNRegressorU16I32HammingU16 }
export { KNNRegressorU32EuclidianU32Parameters }
export { KNNRegressorU32I32EuclidianU32 }
export { KNNRegressorU32I32ManhattanU32 }
export { KNNRegressorU32ManhattanU32Parameters }
export { KNNRegressorU64EuclidianU64Parameters }
export { KNNRegressorU64I32EuclidianU64 }
export { KNNRegressorU64I32ManhattanU64 }
export { KNNRegressorU64ManhattanU64Parameters }
export { KNNRegressorU8EuclidianU8Parameters }
export { KNNRegressorU8HammingU8Parameters }
export { KNNRegressorU8I32EuclidianU8 }
export { KNNRegressorU8I32HammingU8 }
export { LassoF64BigI64 }
export { LassoF64BigU64 }
export { LassoF64F64 }
export { LassoF64I64 }
export { LassoParameters }
export { LinearRegressionF64BigI64 }
export { LinearRegressionF64BigU64 }
export { LinearRegressionF64F64 }
export { LinearRegressionF64I64 }
export { LinearRegressionParameters }
export { LogisticRegressionF64BigI64 }
export { LogisticRegressionF64BigU64 }
export { LogisticRegressionF64I64 }
export { LogisticRegressionParametersF64 }
export { MahalanobisF32 }
export { MahalanobisF64 }
export { ManhattanF32 }
export { ManhattanF64 }
export { ManhattanI32 }
export { ManhattanI64 }
export { ManhattanU32 }
export { ManhattanU64 }
export { MeanAbsoluteErrorF64 }
export { MeanAbsoluteErrorf64 }
export { MeanSquareErrorF64 }
export { MeanSquareErrorf64 }
export { MinkowskiF32 }
export { MinkowskiF64 }
export { MinkowskiI32 }
export { MinkowskiI64 }
export { MultinomialNBParameters }
export { MultinomialNBU64BigU64 }
export { OneHotEncoderF64 }
export { OneHotEncoderParameters }
export { PCAF64 }
export { PCAParameters }
export { PrecisionF64 }
export { Precisionf64 }
export { R2F64 }
export { R2f64 }
export { R2I64 }
export { R2i64 }
export { R2U64 }
export { R2u64 }
export { RandomForestClassifierF64BigI64 }
export { RandomForestClassifierF64BigU64 }
export { RandomForestClassifierF64I64 }
export { RandomForestClassifierParameters }
export { RandomForestRegressorF64BigI64 }
export { RandomForestRegressorF64BigU64 }
export { RandomForestRegressorF64F64 }
export { RandomForestRegressorF64I64 }
export { RandomForestRegressorParameters }
export { RecallF64 }
export { Recallf64 }
export { RidgeRegressionF64BigI64 }
export { RidgeRegressionF64BigU64 }
export { RidgeRegressionF64F64 }
export { RidgeRegressionF64I64 }
export { RidgeRegressionF64Parameters }
export { StandardScalerF64 }
export { StandardScalerParameters }
export { SVCF64I64 }
export { SVCParametersF64I64 }
export { SVDF64 }
export { SVDF64DenseMatrixF64 }
export { SVDParameters }
export { SVRF64 }
export { SVRParametersF64 }
export { VecF64 }
export { VecI64 }
export { crossValidateElasticNetF64F64 }
export { crossValidateElasticNetF64I64 }
export { crossValidateLogisticRegressionF64I64 }
export { KNNAlgorithmName }
export { KNNWeightFunction }
export { LinearRegressionSolverName }
export { LogisticRegressionSolverName }
export { RidgeRegressionSolverName }
export { SplitCriterion }
export { trainTestSplitF64BigI64 }
export { trainTestSplitF64BigU64 }
export { trainTestSplitF64F64 }
export { trainTestSplitF64I64 }
