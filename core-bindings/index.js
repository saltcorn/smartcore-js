// prettier-ignore
/* eslint-disable */
// @ts-nocheck
/* auto-generated by NAPI-RS */

import { createRequire } from 'node:module'
const require = createRequire(import.meta.url)
const __dirname = new URL('.', import.meta.url).pathname

const { readFileSync } = require('node:fs')
let nativeBinding = null
const loadErrors = []

const isMusl = () => {
  let musl = false
  if (process.platform === 'linux') {
    musl = isMuslFromFilesystem()
    if (musl === null) {
      musl = isMuslFromReport()
    }
    if (musl === null) {
      musl = isMuslFromChildProcess()
    }
  }
  return musl
}

const isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-')

const isMuslFromFilesystem = () => {
  try {
    return readFileSync('/usr/bin/ldd', 'utf-8').includes('musl')
  } catch {
    return null
  }
}

const isMuslFromReport = () => {
  let report = null
  if (typeof process.report?.getReport === 'function') {
    process.report.excludeNetwork = true
    report = process.report.getReport()
  }
  if (!report) {
    return null
  }
  if (report.header && report.header.glibcVersionRuntime) {
    return false
  }
  if (Array.isArray(report.sharedObjects)) {
    if (report.sharedObjects.some(isFileMusl)) {
      return true
    }
  }
  return false
}

const isMuslFromChildProcess = () => {
  try {
    return require('child_process').execSync('ldd --version', { encoding: 'utf8' }).includes('musl')
  } catch (e) {
    // If we reach this case, we don't know if the system is musl or not, so is better to just fallback to false
    return false
  }
}

function requireNative() {
  if (process.env.NAPI_RS_NATIVE_LIBRARY_PATH) {
    try {
      nativeBinding = require(process.env.NAPI_RS_NATIVE_LIBRARY_PATH);
    } catch (err) {
      loadErrors.push(err)
    }
  } else if (process.platform === 'android') {
    if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.android-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-android-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./smartcore-js.android-arm-eabi.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-android-arm-eabi')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Android ${process.arch}`))
    }
  } else if (process.platform === 'win32') {
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.win32-x64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-win32-x64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'ia32') {
      try {
        return require('./smartcore-js.win32-ia32-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-win32-ia32-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.win32-arm64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-win32-arm64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Windows: ${process.arch}`))
    }
  } else if (process.platform === 'darwin') {
    try {
      return require('./smartcore-js.darwin-universal.node')
    } catch (e) {
      loadErrors.push(e)
    }
    try {
      return require('@saltcorn/smartcore-js-darwin-universal')
    } catch (e) {
      loadErrors.push(e)
    }
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.darwin-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-darwin-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.darwin-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-darwin-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on macOS: ${process.arch}`))
    }
  } else if (process.platform === 'freebsd') {
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.freebsd-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-freebsd-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.freebsd-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-freebsd-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on FreeBSD: ${process.arch}`))
    }
  } else if (process.platform === 'linux') {
    if (process.arch === 'x64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-x64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-x64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-x64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-x64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-arm64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-arm64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-arm-musleabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm-musleabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-arm-gnueabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm-gnueabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'riscv64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-riscv64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-riscv64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-riscv64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-riscv64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'ppc64') {
      try {
        return require('./smartcore-js.linux-ppc64-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-ppc64-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 's390x') {
      try {
        return require('./smartcore-js.linux-s390x-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-s390x-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Linux: ${process.arch}`))
    }
  } else if (process.platform === 'openharmony') {
    if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.linux-arm64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-arm64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.linux-x64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-x64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./smartcore-js.linux-arm-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-arm-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on OpenHarmony: ${process.arch}`))
    }
  } else {
    loadErrors.push(new Error(`Unsupported OS: ${process.platform}, architecture: ${process.arch}`))
  }
}

nativeBinding = requireNative()

if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
  try {
    nativeBinding = require('./smartcore-js.wasi.cjs')
  } catch (err) {
    if (process.env.NAPI_RS_FORCE_WASI) {
      loadErrors.push(err)
    }
  }
  if (!nativeBinding) {
    try {
      nativeBinding = require('@saltcorn/smartcore-js-wasm32-wasi')
    } catch (err) {
      if (process.env.NAPI_RS_FORCE_WASI) {
        loadErrors.push(err)
      }
    }
  }
}

if (!nativeBinding) {
  if (loadErrors.length > 0) {
    throw new Error(
      `Cannot find native binding. ` +
        `npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828). ` +
        'Please try `npm i` again after removing both package-lock.json and node_modules directory.',
      { cause: loadErrors }
    )
  }
  throw new Error(`Failed to load native binding`)
}

const { AccuracyF64, Accuracyf64, AccuracyI64, Accuracyi64, AccuracyU64, Accuracyu64, AUCF64, AUCf64, BernoulliNBF64BigU64, BernoulliNBF64Parameters, Boston, BreastCancer, CategoricalNBBigU64, CategoricalNBParameters, CrossValidationResult, dataset, Dataset, DatasetF64F64, DatasetF64F64JsVecRef, DatasetF64I64, DatasetF64I64JsVecRef, DatasetF64U64, DBSCANF64EuclidianF64Parameters, DBSCANF64F64EuclidianF64, DBSCANF64F64HammingF64, DBSCANF64F64MahalanobisF64, DBSCANF64F64ManhattanF64, DBSCANF64F64MinkowskiF64, DBSCANF64HammingF64Parameters, DBSCANF64MahalanobisF64Parameters, DBSCANF64ManhattanF64Parameters, DBSCANF64MinkowskiF64Parameters, DecisionTreeClassifierI64I64, DecisionTreeClassifierParameters, DecisionTreeRegressorI64I64, DecisionTreeRegressorParameters, DenseMatrixF64, DenseMatrixI64, DenseMatrixU64, Diabetes, Digits, ElasticNetF64BigI64, ElasticNetF64BigU64, ElasticNetF64F64, ElasticNetF64I64, ElasticNetParameters, EuclidianF64, EuclidianI64, EuclidianU64, ExtraTreesRegressorF64BigI64, ExtraTreesRegressorF64BigU64, ExtraTreesRegressorF64F64, ExtraTreesRegressorF64I64, ExtraTreesRegressorParameters, F1F64, F1f64, GaussianNBF64BigU64, GaussianNBParameters, Generator, HammingF64, HammingI64, HammingU64, HCVScoreI64, HCVScorei64, HCVScoreU64, HCVScoreu64, Iris, JsBoxedArrayF32Ref, JsBoxedArrayF64Ref, JsDenseMatrixF64Ref, JsVecF64Ref, JsVecI64Ref, Kernels, KFold, KMeansF64BigI64, KMeansF64F64, KMeansF64I64, KMeansParameters, KNNClassifierF64BigI64EuclidianF64, KNNClassifierF64BigI64HammingF64, KNNClassifierF64BigI64MahalanobisF64, KNNClassifierF64BigI64ManhattanF64, KNNClassifierF64BigI64MinkowskiF64, KNNClassifierF64BigU64EuclidianF64, KNNClassifierF64BigU64HammingF64, KNNClassifierF64BigU64MahalanobisF64, KNNClassifierF64BigU64ManhattanF64, KNNClassifierF64BigU64MinkowskiF64, KNNClassifierF64EuclidianF64Parameters, KNNClassifierF64HammingF64Parameters, KNNClassifierF64I64EuclidianF64, KNNClassifierF64I64HammingF64, KNNClassifierF64I64MahalanobisF64, KNNClassifierF64I64ManhattanF64, KNNClassifierF64I64MinkowskiF64, KNNClassifierF64MahalanobisF64Parameters, KNNClassifierF64ManhattanF64Parameters, KNNClassifierF64MinkowskiF64Parameters, KNNRegressorF64BigI64, KNNRegressorF64BigU64, KNNRegressorF64F64, KNNRegressorF64I64, KNNRegressorParametersF64EuclidianF64, EuclidianF64KNNRegressorParametersF64, KNNRegressorParametersF64HammingF64, HammingF64KNNRegressorParametersF64, LassoF64BigI64, LassoF64BigU64, LassoF64F64, LassoF64I64, LassoParameters, LinearRegressionF64BigI64, LinearRegressionF64BigU64, LinearRegressionF64F64, LinearRegressionF64I64, LinearRegressionParameters, LogisticRegressionF64BigI64, LogisticRegressionF64BigU64, LogisticRegressionF64I64, LogisticRegressionParametersF64, MahalanobisF64, ManhattanF64, ManhattanI64, ManhattanU64, MeanAbsoluteErrorF64, MeanAbsoluteErrorf64, MeanSquareErrorF64, MeanSquareErrorf64, MinkowskiF64, MinkowskiI64, MinkowskiU64, MultinomialNBParameters, MultinomialNBU64BigU64, OneHotEncoderF64, OneHotEncoderParameters, PCAF64, PCAParameters, PrecisionF64, Precisionf64, R2F64, R2f64, R2I64, R2i64, R2U64, R2u64, RandomForestClassifierF64BigI64, RandomForestClassifierF64BigU64, RandomForestClassifierF64I64, RandomForestClassifierParameters, RandomForestRegressorF64BigI64, RandomForestRegressorF64BigU64, RandomForestRegressorF64F64, RandomForestRegressorF64I64, RandomForestRegressorParameters, RecallF64, Recallf64, RidgeRegressionF64BigI64, RidgeRegressionF64BigU64, RidgeRegressionF64F64, RidgeRegressionF64I64, RidgeRegressionF64Parameters, StandardScalerF64, StandardScalerParameters, SVCF64I64, SVCParametersF64I64, SVDF64, SVDF64DenseMatrixF64, SVDParameters, SVRF64, SVRParametersF64, VecF64, VecI64, crossValidateElasticNetF64F64, crossValidateElasticNetF64I64, crossValidateLogisticRegressionF64I64, KNNAlgorithmName, KNNWeightFunction, LinearRegressionSolverName, LogisticRegressionSolverName, RidgeRegressionSolverName, SplitCriterion, trainTestSplitF64BigI64, trainTestSplitF64BigU64, trainTestSplitF64F64, trainTestSplitF64I64 } = nativeBinding
export { AccuracyF64 }
export { Accuracyf64 }
export { AccuracyI64 }
export { Accuracyi64 }
export { AccuracyU64 }
export { Accuracyu64 }
export { AUCF64 }
export { AUCf64 }
export { BernoulliNBF64BigU64 }
export { BernoulliNBF64Parameters }
export { Boston }
export { BreastCancer }
export { CategoricalNBBigU64 }
export { CategoricalNBParameters }
export { CrossValidationResult }
export { dataset }
export { Dataset }
export { DatasetF64F64 }
export { DatasetF64F64JsVecRef }
export { DatasetF64I64 }
export { DatasetF64I64JsVecRef }
export { DatasetF64U64 }
export { DBSCANF64EuclidianF64Parameters }
export { DBSCANF64F64EuclidianF64 }
export { DBSCANF64F64HammingF64 }
export { DBSCANF64F64MahalanobisF64 }
export { DBSCANF64F64ManhattanF64 }
export { DBSCANF64F64MinkowskiF64 }
export { DBSCANF64HammingF64Parameters }
export { DBSCANF64MahalanobisF64Parameters }
export { DBSCANF64ManhattanF64Parameters }
export { DBSCANF64MinkowskiF64Parameters }
export { DecisionTreeClassifierI64I64 }
export { DecisionTreeClassifierParameters }
export { DecisionTreeRegressorI64I64 }
export { DecisionTreeRegressorParameters }
export { DenseMatrixF64 }
export { DenseMatrixI64 }
export { DenseMatrixU64 }
export { Diabetes }
export { Digits }
export { ElasticNetF64BigI64 }
export { ElasticNetF64BigU64 }
export { ElasticNetF64F64 }
export { ElasticNetF64I64 }
export { ElasticNetParameters }
export { EuclidianF64 }
export { EuclidianI64 }
export { EuclidianU64 }
export { ExtraTreesRegressorF64BigI64 }
export { ExtraTreesRegressorF64BigU64 }
export { ExtraTreesRegressorF64F64 }
export { ExtraTreesRegressorF64I64 }
export { ExtraTreesRegressorParameters }
export { F1F64 }
export { F1f64 }
export { GaussianNBF64BigU64 }
export { GaussianNBParameters }
export { Generator }
export { HammingF64 }
export { HammingI64 }
export { HammingU64 }
export { HCVScoreI64 }
export { HCVScorei64 }
export { HCVScoreU64 }
export { HCVScoreu64 }
export { Iris }
export { JsBoxedArrayF32Ref }
export { JsBoxedArrayF64Ref }
export { JsDenseMatrixF64Ref }
export { JsVecF64Ref }
export { JsVecI64Ref }
export { Kernels }
export { KFold }
export { KMeansF64BigI64 }
export { KMeansF64F64 }
export { KMeansF64I64 }
export { KMeansParameters }
export { KNNClassifierF64BigI64EuclidianF64 }
export { KNNClassifierF64BigI64HammingF64 }
export { KNNClassifierF64BigI64MahalanobisF64 }
export { KNNClassifierF64BigI64ManhattanF64 }
export { KNNClassifierF64BigI64MinkowskiF64 }
export { KNNClassifierF64BigU64EuclidianF64 }
export { KNNClassifierF64BigU64HammingF64 }
export { KNNClassifierF64BigU64MahalanobisF64 }
export { KNNClassifierF64BigU64ManhattanF64 }
export { KNNClassifierF64BigU64MinkowskiF64 }
export { KNNClassifierF64EuclidianF64Parameters }
export { KNNClassifierF64HammingF64Parameters }
export { KNNClassifierF64I64EuclidianF64 }
export { KNNClassifierF64I64HammingF64 }
export { KNNClassifierF64I64MahalanobisF64 }
export { KNNClassifierF64I64ManhattanF64 }
export { KNNClassifierF64I64MinkowskiF64 }
export { KNNClassifierF64MahalanobisF64Parameters }
export { KNNClassifierF64ManhattanF64Parameters }
export { KNNClassifierF64MinkowskiF64Parameters }
export { KNNRegressorF64BigI64 }
export { KNNRegressorF64BigU64 }
export { KNNRegressorF64F64 }
export { KNNRegressorF64I64 }
export { KNNRegressorParametersF64EuclidianF64 }
export { EuclidianF64KNNRegressorParametersF64 }
export { KNNRegressorParametersF64HammingF64 }
export { HammingF64KNNRegressorParametersF64 }
export { LassoF64BigI64 }
export { LassoF64BigU64 }
export { LassoF64F64 }
export { LassoF64I64 }
export { LassoParameters }
export { LinearRegressionF64BigI64 }
export { LinearRegressionF64BigU64 }
export { LinearRegressionF64F64 }
export { LinearRegressionF64I64 }
export { LinearRegressionParameters }
export { LogisticRegressionF64BigI64 }
export { LogisticRegressionF64BigU64 }
export { LogisticRegressionF64I64 }
export { LogisticRegressionParametersF64 }
export { MahalanobisF64 }
export { ManhattanF64 }
export { ManhattanI64 }
export { ManhattanU64 }
export { MeanAbsoluteErrorF64 }
export { MeanAbsoluteErrorf64 }
export { MeanSquareErrorF64 }
export { MeanSquareErrorf64 }
export { MinkowskiF64 }
export { MinkowskiI64 }
export { MinkowskiU64 }
export { MultinomialNBParameters }
export { MultinomialNBU64BigU64 }
export { OneHotEncoderF64 }
export { OneHotEncoderParameters }
export { PCAF64 }
export { PCAParameters }
export { PrecisionF64 }
export { Precisionf64 }
export { R2F64 }
export { R2f64 }
export { R2I64 }
export { R2i64 }
export { R2U64 }
export { R2u64 }
export { RandomForestClassifierF64BigI64 }
export { RandomForestClassifierF64BigU64 }
export { RandomForestClassifierF64I64 }
export { RandomForestClassifierParameters }
export { RandomForestRegressorF64BigI64 }
export { RandomForestRegressorF64BigU64 }
export { RandomForestRegressorF64F64 }
export { RandomForestRegressorF64I64 }
export { RandomForestRegressorParameters }
export { RecallF64 }
export { Recallf64 }
export { RidgeRegressionF64BigI64 }
export { RidgeRegressionF64BigU64 }
export { RidgeRegressionF64F64 }
export { RidgeRegressionF64I64 }
export { RidgeRegressionF64Parameters }
export { StandardScalerF64 }
export { StandardScalerParameters }
export { SVCF64I64 }
export { SVCParametersF64I64 }
export { SVDF64 }
export { SVDF64DenseMatrixF64 }
export { SVDParameters }
export { SVRF64 }
export { SVRParametersF64 }
export { VecF64 }
export { VecI64 }
export { crossValidateElasticNetF64F64 }
export { crossValidateElasticNetF64I64 }
export { crossValidateLogisticRegressionF64I64 }
export { KNNAlgorithmName }
export { KNNWeightFunction }
export { LinearRegressionSolverName }
export { LogisticRegressionSolverName }
export { RidgeRegressionSolverName }
export { SplitCriterion }
export { trainTestSplitF64BigI64 }
export { trainTestSplitF64BigU64 }
export { trainTestSplitF64F64 }
export { trainTestSplitF64I64 }
