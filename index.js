// prettier-ignore
/* eslint-disable */
// @ts-nocheck
/* auto-generated by NAPI-RS */

const { createRequire } = require('node:module')
require = createRequire(__filename)

const { readFileSync } = require('node:fs')
let nativeBinding = null
const loadErrors = []

const isMusl = () => {
  let musl = false
  if (process.platform === 'linux') {
    musl = isMuslFromFilesystem()
    if (musl === null) {
      musl = isMuslFromReport()
    }
    if (musl === null) {
      musl = isMuslFromChildProcess()
    }
  }
  return musl
}

const isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-')

const isMuslFromFilesystem = () => {
  try {
    return readFileSync('/usr/bin/ldd', 'utf-8').includes('musl')
  } catch {
    return null
  }
}

const isMuslFromReport = () => {
  let report = null
  if (typeof process.report?.getReport === 'function') {
    process.report.excludeNetwork = true
    report = process.report.getReport()
  }
  if (!report) {
    return null
  }
  if (report.header && report.header.glibcVersionRuntime) {
    return false
  }
  if (Array.isArray(report.sharedObjects)) {
    if (report.sharedObjects.some(isFileMusl)) {
      return true
    }
  }
  return false
}

const isMuslFromChildProcess = () => {
  try {
    return require('child_process').execSync('ldd --version', { encoding: 'utf8' }).includes('musl')
  } catch (e) {
    // If we reach this case, we don't know if the system is musl or not, so is better to just fallback to false
    return false
  }
}

function requireNative() {
  if (process.env.NAPI_RS_NATIVE_LIBRARY_PATH) {
    try {
      nativeBinding = require(process.env.NAPI_RS_NATIVE_LIBRARY_PATH);
    } catch (err) {
      loadErrors.push(err)
    }
  } else if (process.platform === 'android') {
    if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.android-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-android-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./smartcore-js.android-arm-eabi.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-android-arm-eabi')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Android ${process.arch}`))
    }
  } else if (process.platform === 'win32') {
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.win32-x64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-win32-x64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'ia32') {
      try {
        return require('./smartcore-js.win32-ia32-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-win32-ia32-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.win32-arm64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-win32-arm64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Windows: ${process.arch}`))
    }
  } else if (process.platform === 'darwin') {
    try {
      return require('./smartcore-js.darwin-universal.node')
    } catch (e) {
      loadErrors.push(e)
    }
    try {
      return require('@saltcorn/smartcore-js-darwin-universal')
    } catch (e) {
      loadErrors.push(e)
    }
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.darwin-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-darwin-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.darwin-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-darwin-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on macOS: ${process.arch}`))
    }
  } else if (process.platform === 'freebsd') {
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.freebsd-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-freebsd-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.freebsd-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-freebsd-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on FreeBSD: ${process.arch}`))
    }
  } else if (process.platform === 'linux') {
    if (process.arch === 'x64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-x64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-x64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-x64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-x64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-arm64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-arm64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-arm-musleabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm-musleabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-arm-gnueabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm-gnueabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'riscv64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-riscv64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-riscv64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-riscv64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-riscv64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'ppc64') {
      try {
        return require('./smartcore-js.linux-ppc64-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-ppc64-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 's390x') {
      try {
        return require('./smartcore-js.linux-s390x-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-s390x-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Linux: ${process.arch}`))
    }
  } else if (process.platform === 'openharmony') {
    if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.linux-arm64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-arm64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.linux-x64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-x64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./smartcore-js.linux-arm-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-arm-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on OpenHarmony: ${process.arch}`))
    }
  } else {
    loadErrors.push(new Error(`Unsupported OS: ${process.platform}, architecture: ${process.arch}`))
  }
}

nativeBinding = requireNative()

if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
  try {
    nativeBinding = require('./smartcore-js.wasi.cjs')
  } catch (err) {
    if (process.env.NAPI_RS_FORCE_WASI) {
      loadErrors.push(err)
    }
  }
  if (!nativeBinding) {
    try {
      nativeBinding = require('@saltcorn/smartcore-js-wasm32-wasi')
    } catch (err) {
      if (process.env.NAPI_RS_FORCE_WASI) {
        loadErrors.push(err)
      }
    }
  }
}

if (!nativeBinding) {
  if (loadErrors.length > 0) {
    throw new Error(
      `Cannot find native binding. ` +
        `npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828). ` +
        'Please try `npm i` again after removing both package-lock.json and node_modules directory.',
      { cause: loadErrors }
    )
  }
  throw new Error(`Failed to load native binding`)
}

module.exports = nativeBinding
module.exports.AccuracyF32 = nativeBinding.AccuracyF32
module.exports.Accuracyf32 = nativeBinding.Accuracyf32
module.exports.AccuracyF64 = nativeBinding.AccuracyF64
module.exports.Accuracyf64 = nativeBinding.Accuracyf64
module.exports.AccuracyU32 = nativeBinding.AccuracyU32
module.exports.Accuracyu32 = nativeBinding.Accuracyu32
module.exports.Aucf32 = nativeBinding.Aucf32
module.exports.AUCF32 = nativeBinding.AUCF32
module.exports.Boston = nativeBinding.Boston
module.exports.BreastCancer = nativeBinding.BreastCancer
module.exports.dataset = nativeBinding.dataset
module.exports.Dataset = nativeBinding.Dataset
module.exports.Datasetf32F32 = nativeBinding.Datasetf32F32
module.exports.Datasetf32f32 = nativeBinding.Datasetf32f32
module.exports.Datasetf32U32 = nativeBinding.Datasetf32U32
module.exports.Datasetf32u32 = nativeBinding.Datasetf32u32
module.exports.DenseMatrixf32 = nativeBinding.DenseMatrixf32
module.exports.DenseMatrixf64 = nativeBinding.DenseMatrixf64
module.exports.Diabetes = nativeBinding.Diabetes
module.exports.Digits = nativeBinding.Digits
module.exports.Euclidianf32 = nativeBinding.Euclidianf32
module.exports.Euclidianf64 = nativeBinding.Euclidianf64
module.exports.Euclidiani32 = nativeBinding.Euclidiani32
module.exports.Euclidiani64 = nativeBinding.Euclidiani64
module.exports.Euclidianu32 = nativeBinding.Euclidianu32
module.exports.Euclidianu64 = nativeBinding.Euclidianu64
module.exports.F1F32 = nativeBinding.F1F32
module.exports.Generator = nativeBinding.Generator
module.exports.Hammingf32 = nativeBinding.Hammingf32
module.exports.Hammingf64 = nativeBinding.Hammingf64
module.exports.Hammingi32 = nativeBinding.Hammingi32
module.exports.Hammingi64 = nativeBinding.Hammingi64
module.exports.Hammingu32 = nativeBinding.Hammingu32
module.exports.Hammingu64 = nativeBinding.Hammingu64
module.exports.HcvScoreU32 = nativeBinding.HcvScoreU32
module.exports.HCVScoreU32 = nativeBinding.HCVScoreU32
module.exports.Iris = nativeBinding.Iris
module.exports.KNNClassifierF32U32 = nativeBinding.KNNClassifierF32U32
module.exports.KNNClassifierf32u32 = nativeBinding.KNNClassifierf32u32
module.exports.Mahalanobisf64 = nativeBinding.Mahalanobisf64
module.exports.Manhattanf32 = nativeBinding.Manhattanf32
module.exports.Manhattanf64 = nativeBinding.Manhattanf64
module.exports.Manhattani32 = nativeBinding.Manhattani32
module.exports.Manhattani64 = nativeBinding.Manhattani64
module.exports.Manhattanu32 = nativeBinding.Manhattanu32
module.exports.Manhattanu64 = nativeBinding.Manhattanu64
module.exports.MeanAbsoluteErrorF32 = nativeBinding.MeanAbsoluteErrorF32
module.exports.MeanSquareErrorF32 = nativeBinding.MeanSquareErrorF32
module.exports.Minkowskif32 = nativeBinding.Minkowskif32
module.exports.Minkowskif64 = nativeBinding.Minkowskif64
module.exports.Minkowskii32 = nativeBinding.Minkowskii32
module.exports.Minkowskii64 = nativeBinding.Minkowskii64
module.exports.Minkowskiu32 = nativeBinding.Minkowskiu32
module.exports.Minkowskiu64 = nativeBinding.Minkowskiu64
module.exports.PCAF32 = nativeBinding.PCAF32
module.exports.PCAf32 = nativeBinding.PCAf32
module.exports.PCAF64 = nativeBinding.PCAF64
module.exports.PCAf64 = nativeBinding.PCAf64
module.exports.PCAParameters = nativeBinding.PCAParameters
module.exports.PrecisionF32 = nativeBinding.PrecisionF32
module.exports.R2U32 = nativeBinding.R2U32
module.exports.RecallF32 = nativeBinding.RecallF32
module.exports.RidgeRegressionF32F32 = nativeBinding.RidgeRegressionF32F32
module.exports.RidgeRegressionf32f32 = nativeBinding.RidgeRegressionf32f32
module.exports.RidgeRegressionF64F64 = nativeBinding.RidgeRegressionF64F64
module.exports.RidgeRegressionf64f64 = nativeBinding.RidgeRegressionf64f64
module.exports.RidgeRegressionParametersF32 = nativeBinding.RidgeRegressionParametersF32
module.exports.RidgeRegressionParametersf32 = nativeBinding.RidgeRegressionParametersf32
module.exports.RidgeRegressionParametersF64 = nativeBinding.RidgeRegressionParametersF64
module.exports.RidgeRegressionParametersf64 = nativeBinding.RidgeRegressionParametersf64
module.exports.RidgeRegressionSolverName = nativeBinding.RidgeRegressionSolverName
module.exports.trainTestSplitF32F32 = nativeBinding.trainTestSplitF32F32
module.exports.trainTestSplitF64F64 = nativeBinding.trainTestSplitF64F64
