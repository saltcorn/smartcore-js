// prettier-ignore
/* eslint-disable */
// @ts-nocheck
/* auto-generated by NAPI-RS */

import { createRequire } from 'node:module'
const require = createRequire(import.meta.url)
const __dirname = new URL('.', import.meta.url).pathname

const { readFileSync } = require('node:fs')
let nativeBinding = null
const loadErrors = []

const isMusl = () => {
  let musl = false
  if (process.platform === 'linux') {
    musl = isMuslFromFilesystem()
    if (musl === null) {
      musl = isMuslFromReport()
    }
    if (musl === null) {
      musl = isMuslFromChildProcess()
    }
  }
  return musl
}

const isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-')

const isMuslFromFilesystem = () => {
  try {
    return readFileSync('/usr/bin/ldd', 'utf-8').includes('musl')
  } catch {
    return null
  }
}

const isMuslFromReport = () => {
  let report = null
  if (typeof process.report?.getReport === 'function') {
    process.report.excludeNetwork = true
    report = process.report.getReport()
  }
  if (!report) {
    return null
  }
  if (report.header && report.header.glibcVersionRuntime) {
    return false
  }
  if (Array.isArray(report.sharedObjects)) {
    if (report.sharedObjects.some(isFileMusl)) {
      return true
    }
  }
  return false
}

const isMuslFromChildProcess = () => {
  try {
    return require('child_process').execSync('ldd --version', { encoding: 'utf8' }).includes('musl')
  } catch (e) {
    // If we reach this case, we don't know if the system is musl or not, so is better to just fallback to false
    return false
  }
}

function requireNative() {
  if (process.env.NAPI_RS_NATIVE_LIBRARY_PATH) {
    try {
      nativeBinding = require(process.env.NAPI_RS_NATIVE_LIBRARY_PATH);
    } catch (err) {
      loadErrors.push(err)
    }
  } else if (process.platform === 'android') {
    if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.android-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-android-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./smartcore-js.android-arm-eabi.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-android-arm-eabi')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Android ${process.arch}`))
    }
  } else if (process.platform === 'win32') {
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.win32-x64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-win32-x64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'ia32') {
      try {
        return require('./smartcore-js.win32-ia32-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-win32-ia32-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.win32-arm64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-win32-arm64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Windows: ${process.arch}`))
    }
  } else if (process.platform === 'darwin') {
    try {
      return require('./smartcore-js.darwin-universal.node')
    } catch (e) {
      loadErrors.push(e)
    }
    try {
      return require('@saltcorn/smartcore-js-darwin-universal')
    } catch (e) {
      loadErrors.push(e)
    }
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.darwin-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-darwin-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.darwin-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-darwin-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on macOS: ${process.arch}`))
    }
  } else if (process.platform === 'freebsd') {
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.freebsd-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-freebsd-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.freebsd-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-freebsd-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on FreeBSD: ${process.arch}`))
    }
  } else if (process.platform === 'linux') {
    if (process.arch === 'x64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-x64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-x64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-x64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-x64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-arm64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-arm64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-arm-musleabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm-musleabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-arm-gnueabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm-gnueabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'riscv64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-riscv64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-riscv64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-riscv64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-riscv64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'ppc64') {
      try {
        return require('./smartcore-js.linux-ppc64-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-ppc64-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 's390x') {
      try {
        return require('./smartcore-js.linux-s390x-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-s390x-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Linux: ${process.arch}`))
    }
  } else if (process.platform === 'openharmony') {
    if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.linux-arm64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-arm64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.linux-x64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-x64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./smartcore-js.linux-arm-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-arm-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on OpenHarmony: ${process.arch}`))
    }
  } else {
    loadErrors.push(new Error(`Unsupported OS: ${process.platform}, architecture: ${process.arch}`))
  }
}

nativeBinding = requireNative()

if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
  try {
    nativeBinding = require('./smartcore-js.wasi.cjs')
  } catch (err) {
    if (process.env.NAPI_RS_FORCE_WASI) {
      loadErrors.push(err)
    }
  }
  if (!nativeBinding) {
    try {
      nativeBinding = require('@saltcorn/smartcore-js-wasm32-wasi')
    } catch (err) {
      if (process.env.NAPI_RS_FORCE_WASI) {
        loadErrors.push(err)
      }
    }
  }
}

if (!nativeBinding) {
  if (loadErrors.length > 0) {
    throw new Error(
      `Cannot find native binding. ` +
        `npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828). ` +
        'Please try `npm i` again after removing both package-lock.json and node_modules directory.',
      { cause: loadErrors }
    )
  }
  throw new Error(`Failed to load native binding`)
}

const { AccuracyF32, Accuracyf32, AccuracyF64, Accuracyf64, AccuracyU32, Accuracyu32, AUCF32, AUCf32, AUCF64, AUCf64, BernoulliNBParametersF32, BernoulliNBParametersF64, Boston, BreastCancer, CategoricalNBParameters, CategoricalNBU32, CategoricalNBU64, CrossValidationResult, dataset, Dataset, DatasetF32F32, DatasetF32F32JsVecRef, DatasetF32U32, DatasetF32U32JsVecRef, DatasetF64F64, DatasetF64F64JsVecRef, DatasetF64U64, DatasetF64U64JsVecRef, DBSCANF32F32, DecisionTreeClassifierParameters, DecisionTreeClassifierU32U32, DecisionTreeClassifierU32U64, DecisionTreeClassifierU64U32, DecisionTreeClassifierU64U64, DecisionTreeRegressorParameters, DecisionTreeRegressorU32U32, DecisionTreeRegressorU32U64, DecisionTreeRegressorU64U32, DecisionTreeRegressorU64U64, DenseMatrixF32, DenseMatrixF64, DenseMatrixU32, DenseMatrixU64, Diabetes, Digits, ElasticNetF32F32, ElasticNetF32U32, ElasticNetF64F64, ElasticNetParameters, Euclidianf32, EuclidianF32, EuclidianF32DBSCANF32Parameters, Euclidianf64, EuclidianF64, Euclidiani32, EuclidianI32, Euclidiani64, EuclidianI64, Euclidianu32, EuclidianU32, Euclidianu64, EuclidianU64, ExtraTreesRegressorF32F32, ExtraTreesRegressorF32U32, ExtraTreesRegressorF64F64, ExtraTreesRegressorF64U64, ExtraTreesRegressorParameters, F1F32, F1f32, F1F64, F1f64, GausianNBF32U32, GausianNBF64U64, GaussianNBF32U32, GaussianNBF64U64, GaussianNBParameters, Generator, HammingF32, HammingF32DBSCANF32Parameters, HammingF64, HammingI32, HammingI64, HammingU32, HammingU64, HCVScoreU32, HCVScoreu32, HCVScoreU64, HCVScoreu64, Iris, JsBoxedArrayF32Ref, JsBoxedArrayF64Ref, JsDenseMatrixF32Ref, JsDenseMatrixF64Ref, JsVecF32Ref, JsVecF64Ref, JsVecU32Ref, JsVecU64Ref, Kernels, KFold, KMeansF32F32, KMeansF32U32, KMeansF64F64, KMeansF64U64, KMeansParameters, KNNClassifierF32U32, KNNRegressorF32F32, KNNRegressorF32U32, KNNRegressorParametersF32EuclidianF32, EuclidianF32KNNRegressorParametersF32, KNNRegressorParametersF32HammingF32, HammingF32KNNRegressorParametersF32, LassoF32F32, LassoF32U32, LassoF64F64, LassoParameters, LinearRegressionF32F32, LinearRegressionF32U32, LinearRegressionF64F64, LinearRegressionParameters, LogisticRegressionF32U32, LogisticRegressionF64U64, LogisticRegressionParametersF32, LogisticRegressionParametersF64, MahalanobisF64, ManhattanF32, ManhattanF64, ManhattanI32, ManhattanI64, ManhattanU32, ManhattanU64, MeanAbsoluteErrorF32, MeanAbsoluteErrorf32, MeanAbsoluteErrorF64, MeanAbsoluteErrorf64, MeanSquareErrorF32, MeanSquareErrorf32, MeanSquareErrorF64, MeanSquareErrorf64, MinkowskiF32, MinkowskiF64, MinkowskiI32, MinkowskiI64, MinkowskiU32, MinkowskiU64, MultinomialNBParameters, MultinomialNBU32U32, MultinomialNBU32U64, MultinomialNBU64U32, MultinomialNBU64U64, PCAF32, PCAF64, PCAParameters, PrecisionF32, Precisionf32, PrecisionF64, Precisionf64, R2F32, R2f32, R2U32, R2u32, R2U64, R2u64, RandomForestClassifierF32U32, RandomForestClassifierF64U64, RandomForestClassifierParameters, RandomForestRegressorF32F32, RandomForestRegressorF32U32, RandomForestRegressorF64F64, RandomForestRegressorF64U64, RandomForestRegressorParameters, RecallF32, Recallf32, RecallF64, Recallf64, RidgeRegressionF32F32, RidgeRegressionF32U32, RidgeRegressionF64F64, RidgeRegressionParametersF32, RidgeRegressionParametersF64, SVCF32U32, SVCF64U64, SVCParametersF32U32, SVCParametersF64U64, SVDF32, SVDF32DenseMatrixF32, SVDF64, SVDF64DenseMatrixF64, SVDParameters, SVRF32, SVRF64, SVRParametersF32, SVRParametersF64, VecF32, VecF64, VecU32, VecU64, crossValidateElasticNetF32F32, crossValidateElasticNetF32U32, crossValidateElasticNetF64F64, crossValidateLassoF32F32, crossValidateLassoF32U32, crossValidateLassoF64F64, crossValidateLogisticRegressionF32U32, crossValidateLogisticRegressionF64U64, KNNAlgorithmName, KNNWeightFunction, LinearRegressionSolverName, LogisticRegressionSolverName, RidgeRegressionSolverName, SplitCriterion, trainTestSplitF32F32, trainTestSplitF32U32, trainTestSplitF64F64 } = nativeBinding
export { AccuracyF32 }
export { Accuracyf32 }
export { AccuracyF64 }
export { Accuracyf64 }
export { AccuracyU32 }
export { Accuracyu32 }
export { AUCF32 }
export { AUCf32 }
export { AUCF64 }
export { AUCf64 }
export { BernoulliNBParametersF32 }
export { BernoulliNBParametersF64 }
export { Boston }
export { BreastCancer }
export { CategoricalNBParameters }
export { CategoricalNBU32 }
export { CategoricalNBU64 }
export { CrossValidationResult }
export { dataset }
export { Dataset }
export { DatasetF32F32 }
export { DatasetF32F32JsVecRef }
export { DatasetF32U32 }
export { DatasetF32U32JsVecRef }
export { DatasetF64F64 }
export { DatasetF64F64JsVecRef }
export { DatasetF64U64 }
export { DatasetF64U64JsVecRef }
export { DBSCANF32F32 }
export { DecisionTreeClassifierParameters }
export { DecisionTreeClassifierU32U32 }
export { DecisionTreeClassifierU32U64 }
export { DecisionTreeClassifierU64U32 }
export { DecisionTreeClassifierU64U64 }
export { DecisionTreeRegressorParameters }
export { DecisionTreeRegressorU32U32 }
export { DecisionTreeRegressorU32U64 }
export { DecisionTreeRegressorU64U32 }
export { DecisionTreeRegressorU64U64 }
export { DenseMatrixF32 }
export { DenseMatrixF64 }
export { DenseMatrixU32 }
export { DenseMatrixU64 }
export { Diabetes }
export { Digits }
export { ElasticNetF32F32 }
export { ElasticNetF32U32 }
export { ElasticNetF64F64 }
export { ElasticNetParameters }
export { Euclidianf32 }
export { EuclidianF32 }
export { EuclidianF32DBSCANF32Parameters }
export { Euclidianf64 }
export { EuclidianF64 }
export { Euclidiani32 }
export { EuclidianI32 }
export { Euclidiani64 }
export { EuclidianI64 }
export { Euclidianu32 }
export { EuclidianU32 }
export { Euclidianu64 }
export { EuclidianU64 }
export { ExtraTreesRegressorF32F32 }
export { ExtraTreesRegressorF32U32 }
export { ExtraTreesRegressorF64F64 }
export { ExtraTreesRegressorF64U64 }
export { ExtraTreesRegressorParameters }
export { F1F32 }
export { F1f32 }
export { F1F64 }
export { F1f64 }
export { GausianNBF32U32 }
export { GausianNBF64U64 }
export { GaussianNBF32U32 }
export { GaussianNBF64U64 }
export { GaussianNBParameters }
export { Generator }
export { HammingF32 }
export { HammingF32DBSCANF32Parameters }
export { HammingF64 }
export { HammingI32 }
export { HammingI64 }
export { HammingU32 }
export { HammingU64 }
export { HCVScoreU32 }
export { HCVScoreu32 }
export { HCVScoreU64 }
export { HCVScoreu64 }
export { Iris }
export { JsBoxedArrayF32Ref }
export { JsBoxedArrayF64Ref }
export { JsDenseMatrixF32Ref }
export { JsDenseMatrixF64Ref }
export { JsVecF32Ref }
export { JsVecF64Ref }
export { JsVecU32Ref }
export { JsVecU64Ref }
export { Kernels }
export { KFold }
export { KMeansF32F32 }
export { KMeansF32U32 }
export { KMeansF64F64 }
export { KMeansF64U64 }
export { KMeansParameters }
export { KNNClassifierF32U32 }
export { KNNRegressorF32F32 }
export { KNNRegressorF32U32 }
export { KNNRegressorParametersF32EuclidianF32 }
export { EuclidianF32KNNRegressorParametersF32 }
export { KNNRegressorParametersF32HammingF32 }
export { HammingF32KNNRegressorParametersF32 }
export { LassoF32F32 }
export { LassoF32U32 }
export { LassoF64F64 }
export { LassoParameters }
export { LinearRegressionF32F32 }
export { LinearRegressionF32U32 }
export { LinearRegressionF64F64 }
export { LinearRegressionParameters }
export { LogisticRegressionF32U32 }
export { LogisticRegressionF64U64 }
export { LogisticRegressionParametersF32 }
export { LogisticRegressionParametersF64 }
export { MahalanobisF64 }
export { ManhattanF32 }
export { ManhattanF64 }
export { ManhattanI32 }
export { ManhattanI64 }
export { ManhattanU32 }
export { ManhattanU64 }
export { MeanAbsoluteErrorF32 }
export { MeanAbsoluteErrorf32 }
export { MeanAbsoluteErrorF64 }
export { MeanAbsoluteErrorf64 }
export { MeanSquareErrorF32 }
export { MeanSquareErrorf32 }
export { MeanSquareErrorF64 }
export { MeanSquareErrorf64 }
export { MinkowskiF32 }
export { MinkowskiF64 }
export { MinkowskiI32 }
export { MinkowskiI64 }
export { MinkowskiU32 }
export { MinkowskiU64 }
export { MultinomialNBParameters }
export { MultinomialNBU32U32 }
export { MultinomialNBU32U64 }
export { MultinomialNBU64U32 }
export { MultinomialNBU64U64 }
export { PCAF32 }
export { PCAF64 }
export { PCAParameters }
export { PrecisionF32 }
export { Precisionf32 }
export { PrecisionF64 }
export { Precisionf64 }
export { R2F32 }
export { R2f32 }
export { R2U32 }
export { R2u32 }
export { R2U64 }
export { R2u64 }
export { RandomForestClassifierF32U32 }
export { RandomForestClassifierF64U64 }
export { RandomForestClassifierParameters }
export { RandomForestRegressorF32F32 }
export { RandomForestRegressorF32U32 }
export { RandomForestRegressorF64F64 }
export { RandomForestRegressorF64U64 }
export { RandomForestRegressorParameters }
export { RecallF32 }
export { Recallf32 }
export { RecallF64 }
export { Recallf64 }
export { RidgeRegressionF32F32 }
export { RidgeRegressionF32U32 }
export { RidgeRegressionF64F64 }
export { RidgeRegressionParametersF32 }
export { RidgeRegressionParametersF64 }
export { SVCF32U32 }
export { SVCF64U64 }
export { SVCParametersF32U32 }
export { SVCParametersF64U64 }
export { SVDF32 }
export { SVDF32DenseMatrixF32 }
export { SVDF64 }
export { SVDF64DenseMatrixF64 }
export { SVDParameters }
export { SVRF32 }
export { SVRF64 }
export { SVRParametersF32 }
export { SVRParametersF64 }
export { VecF32 }
export { VecF64 }
export { VecU32 }
export { VecU64 }
export { crossValidateElasticNetF32F32 }
export { crossValidateElasticNetF32U32 }
export { crossValidateElasticNetF64F64 }
export { crossValidateLassoF32F32 }
export { crossValidateLassoF32U32 }
export { crossValidateLassoF64F64 }
export { crossValidateLogisticRegressionF32U32 }
export { crossValidateLogisticRegressionF64U64 }
export { KNNAlgorithmName }
export { KNNWeightFunction }
export { LinearRegressionSolverName }
export { LogisticRegressionSolverName }
export { RidgeRegressionSolverName }
export { SplitCriterion }
export { trainTestSplitF32F32 }
export { trainTestSplitF32U32 }
export { trainTestSplitF64F64 }
