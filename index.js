// prettier-ignore
/* eslint-disable */
// @ts-nocheck
/* auto-generated by NAPI-RS */

const { createRequire } = require('node:module')
require = createRequire(__filename)

const { readFileSync } = require('node:fs')
let nativeBinding = null
const loadErrors = []

const isMusl = () => {
  let musl = false
  if (process.platform === 'linux') {
    musl = isMuslFromFilesystem()
    if (musl === null) {
      musl = isMuslFromReport()
    }
    if (musl === null) {
      musl = isMuslFromChildProcess()
    }
  }
  return musl
}

const isFileMusl = (f) => f.includes('libc.musl-') || f.includes('ld-musl-')

const isMuslFromFilesystem = () => {
  try {
    return readFileSync('/usr/bin/ldd', 'utf-8').includes('musl')
  } catch {
    return null
  }
}

const isMuslFromReport = () => {
  let report = null
  if (typeof process.report?.getReport === 'function') {
    process.report.excludeNetwork = true
    report = process.report.getReport()
  }
  if (!report) {
    return null
  }
  if (report.header && report.header.glibcVersionRuntime) {
    return false
  }
  if (Array.isArray(report.sharedObjects)) {
    if (report.sharedObjects.some(isFileMusl)) {
      return true
    }
  }
  return false
}

const isMuslFromChildProcess = () => {
  try {
    return require('child_process').execSync('ldd --version', { encoding: 'utf8' }).includes('musl')
  } catch (e) {
    // If we reach this case, we don't know if the system is musl or not, so is better to just fallback to false
    return false
  }
}

function requireNative() {
  if (process.env.NAPI_RS_NATIVE_LIBRARY_PATH) {
    try {
      nativeBinding = require(process.env.NAPI_RS_NATIVE_LIBRARY_PATH);
    } catch (err) {
      loadErrors.push(err)
    }
  } else if (process.platform === 'android') {
    if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.android-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-android-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./smartcore-js.android-arm-eabi.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-android-arm-eabi')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Android ${process.arch}`))
    }
  } else if (process.platform === 'win32') {
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.win32-x64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-win32-x64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'ia32') {
      try {
        return require('./smartcore-js.win32-ia32-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-win32-ia32-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.win32-arm64-msvc.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-win32-arm64-msvc')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Windows: ${process.arch}`))
    }
  } else if (process.platform === 'darwin') {
    try {
      return require('./smartcore-js.darwin-universal.node')
    } catch (e) {
      loadErrors.push(e)
    }
    try {
      return require('@saltcorn/smartcore-js-darwin-universal')
    } catch (e) {
      loadErrors.push(e)
    }
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.darwin-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-darwin-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.darwin-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-darwin-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on macOS: ${process.arch}`))
    }
  } else if (process.platform === 'freebsd') {
    if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.freebsd-x64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-freebsd-x64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.freebsd-arm64.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-freebsd-arm64')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on FreeBSD: ${process.arch}`))
    }
  } else if (process.platform === 'linux') {
    if (process.arch === 'x64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-x64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-x64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-x64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-x64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-arm64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-arm64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'arm') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-arm-musleabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm-musleabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-arm-gnueabihf.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-arm-gnueabihf')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'riscv64') {
      if (isMusl()) {
        try {
          return require('./smartcore-js.linux-riscv64-musl.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-riscv64-musl')
        } catch (e) {
          loadErrors.push(e)
        }
      } else {
        try {
          return require('./smartcore-js.linux-riscv64-gnu.node')
        } catch (e) {
          loadErrors.push(e)
        }
        try {
          return require('@saltcorn/smartcore-js-linux-riscv64-gnu')
        } catch (e) {
          loadErrors.push(e)
        }
      }
    } else if (process.arch === 'ppc64') {
      try {
        return require('./smartcore-js.linux-ppc64-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-ppc64-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 's390x') {
      try {
        return require('./smartcore-js.linux-s390x-gnu.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-s390x-gnu')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on Linux: ${process.arch}`))
    }
  } else if (process.platform === 'openharmony') {
    if (process.arch === 'arm64') {
      try {
        return require('./smartcore-js.linux-arm64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-arm64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'x64') {
      try {
        return require('./smartcore-js.linux-x64-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-x64-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else if (process.arch === 'arm') {
      try {
        return require('./smartcore-js.linux-arm-ohos.node')
      } catch (e) {
        loadErrors.push(e)
      }
      try {
        return require('@saltcorn/smartcore-js-linux-arm-ohos')
      } catch (e) {
        loadErrors.push(e)
      }
    } else {
      loadErrors.push(new Error(`Unsupported architecture on OpenHarmony: ${process.arch}`))
    }
  } else {
    loadErrors.push(new Error(`Unsupported OS: ${process.platform}, architecture: ${process.arch}`))
  }
}

nativeBinding = requireNative()

if (!nativeBinding || process.env.NAPI_RS_FORCE_WASI) {
  try {
    nativeBinding = require('./smartcore-js.wasi.cjs')
  } catch (err) {
    if (process.env.NAPI_RS_FORCE_WASI) {
      loadErrors.push(err)
    }
  }
  if (!nativeBinding) {
    try {
      nativeBinding = require('@saltcorn/smartcore-js-wasm32-wasi')
    } catch (err) {
      if (process.env.NAPI_RS_FORCE_WASI) {
        loadErrors.push(err)
      }
    }
  }
}

if (!nativeBinding) {
  if (loadErrors.length > 0) {
    throw new Error(
      `Cannot find native binding. ` +
        `npm has a bug related to optional dependencies (https://github.com/npm/cli/issues/4828). ` +
        'Please try `npm i` again after removing both package-lock.json and node_modules directory.',
      { cause: loadErrors }
    )
  }
  throw new Error(`Failed to load native binding`)
}

module.exports = nativeBinding
module.exports.AccuracyF32 = nativeBinding.AccuracyF32
module.exports.Accuracyf32 = nativeBinding.Accuracyf32
module.exports.AccuracyF64 = nativeBinding.AccuracyF64
module.exports.Accuracyf64 = nativeBinding.Accuracyf64
module.exports.AccuracyU32 = nativeBinding.AccuracyU32
module.exports.Accuracyu32 = nativeBinding.Accuracyu32
module.exports.AUCF32 = nativeBinding.AUCF32
module.exports.AUCf32 = nativeBinding.AUCf32
module.exports.AUCF64 = nativeBinding.AUCF64
module.exports.AUCf64 = nativeBinding.AUCf64
module.exports.Boston = nativeBinding.Boston
module.exports.BreastCancer = nativeBinding.BreastCancer
module.exports.dataset = nativeBinding.dataset
module.exports.Dataset = nativeBinding.Dataset
module.exports.DatasetF32F32 = nativeBinding.DatasetF32F32
module.exports.DatasetF32U32 = nativeBinding.DatasetF32U32
module.exports.DenseMatrixF32 = nativeBinding.DenseMatrixF32
module.exports.DenseMatrixF64 = nativeBinding.DenseMatrixF64
module.exports.Diabetes = nativeBinding.Diabetes
module.exports.Digits = nativeBinding.Digits
module.exports.ElasticNetF32F32 = nativeBinding.ElasticNetF32F32
module.exports.ElasticNetf32f32 = nativeBinding.ElasticNetf32f32
module.exports.ElasticNetF32U32 = nativeBinding.ElasticNetF32U32
module.exports.ElasticNetf32u32 = nativeBinding.ElasticNetf32u32
module.exports.ElasticNetF64F64 = nativeBinding.ElasticNetF64F64
module.exports.ElasticNetf64f64 = nativeBinding.ElasticNetf64f64
module.exports.ElasticNetParameters = nativeBinding.ElasticNetParameters
module.exports.Euclidianf32 = nativeBinding.Euclidianf32
module.exports.EuclidianF32 = nativeBinding.EuclidianF32
module.exports.Euclidianf64 = nativeBinding.Euclidianf64
module.exports.EuclidianF64 = nativeBinding.EuclidianF64
module.exports.Euclidiani32 = nativeBinding.Euclidiani32
module.exports.EuclidianI32 = nativeBinding.EuclidianI32
module.exports.Euclidiani64 = nativeBinding.Euclidiani64
module.exports.EuclidianI64 = nativeBinding.EuclidianI64
module.exports.Euclidianu32 = nativeBinding.Euclidianu32
module.exports.EuclidianU32 = nativeBinding.EuclidianU32
module.exports.Euclidianu64 = nativeBinding.Euclidianu64
module.exports.EuclidianU64 = nativeBinding.EuclidianU64
module.exports.F1F32 = nativeBinding.F1F32
module.exports.F1f32 = nativeBinding.F1f32
module.exports.F1F64 = nativeBinding.F1F64
module.exports.F1f64 = nativeBinding.F1f64
module.exports.Generator = nativeBinding.Generator
module.exports.HammingF32 = nativeBinding.HammingF32
module.exports.HammingF64 = nativeBinding.HammingF64
module.exports.HammingI32 = nativeBinding.HammingI32
module.exports.HammingI64 = nativeBinding.HammingI64
module.exports.HammingU32 = nativeBinding.HammingU32
module.exports.HammingU64 = nativeBinding.HammingU64
module.exports.HCVScoreU32 = nativeBinding.HCVScoreU32
module.exports.HCVScoreu32 = nativeBinding.HCVScoreu32
module.exports.HCVScoreU64 = nativeBinding.HCVScoreU64
module.exports.HCVScoreu64 = nativeBinding.HCVScoreu64
module.exports.Iris = nativeBinding.Iris
module.exports.KNNClassifierF32U32 = nativeBinding.KNNClassifierF32U32
module.exports.KNNClassifierf32u32 = nativeBinding.KNNClassifierf32u32
module.exports.KNNRegressorF32F32 = nativeBinding.KNNRegressorF32F32
module.exports.KNNRegressorF32U32 = nativeBinding.KNNRegressorF32U32
module.exports.KNNRegressorParametersF32EuclidianF32 = nativeBinding.KNNRegressorParametersF32EuclidianF32
module.exports.EuclidianF32KNNRegressorParametersf32 = nativeBinding.EuclidianF32KNNRegressorParametersf32
module.exports.KNNRegressorParametersF32HammingF32 = nativeBinding.KNNRegressorParametersF32HammingF32
module.exports.HammingF32KNNRegressorParametersf32 = nativeBinding.HammingF32KNNRegressorParametersf32
module.exports.LassoF32F32 = nativeBinding.LassoF32F32
module.exports.Lassof32f32 = nativeBinding.Lassof32f32
module.exports.LassoF32U32 = nativeBinding.LassoF32U32
module.exports.Lassof32u32 = nativeBinding.Lassof32u32
module.exports.LassoF64F64 = nativeBinding.LassoF64F64
module.exports.Lassof64f64 = nativeBinding.Lassof64f64
module.exports.LassoParameters = nativeBinding.LassoParameters
module.exports.LinearRegressionF32F32 = nativeBinding.LinearRegressionF32F32
module.exports.LinearRegressionf32f32 = nativeBinding.LinearRegressionf32f32
module.exports.LinearRegressionF32U32 = nativeBinding.LinearRegressionF32U32
module.exports.LinearRegressionf32u32 = nativeBinding.LinearRegressionf32u32
module.exports.LinearRegressionF64F64 = nativeBinding.LinearRegressionF64F64
module.exports.LinearRegressionf64f64 = nativeBinding.LinearRegressionf64f64
module.exports.LinearRegressionParameters = nativeBinding.LinearRegressionParameters
module.exports.LogisticRegressionF32U32 = nativeBinding.LogisticRegressionF32U32
module.exports.LogisticRegressionf32u32 = nativeBinding.LogisticRegressionf32u32
module.exports.LogisticRegressionF64U64 = nativeBinding.LogisticRegressionF64U64
module.exports.LogisticRegressionf64u64 = nativeBinding.LogisticRegressionf64u64
module.exports.LogisticRegressionParametersF32 = nativeBinding.LogisticRegressionParametersF32
module.exports.LogisticRegressionParametersf32 = nativeBinding.LogisticRegressionParametersf32
module.exports.LogisticRegressionParametersF64 = nativeBinding.LogisticRegressionParametersF64
module.exports.LogisticRegressionParametersf64 = nativeBinding.LogisticRegressionParametersf64
module.exports.MahalanobisF64 = nativeBinding.MahalanobisF64
module.exports.ManhattanF32 = nativeBinding.ManhattanF32
module.exports.ManhattanF64 = nativeBinding.ManhattanF64
module.exports.ManhattanI32 = nativeBinding.ManhattanI32
module.exports.ManhattanI64 = nativeBinding.ManhattanI64
module.exports.ManhattanU32 = nativeBinding.ManhattanU32
module.exports.ManhattanU64 = nativeBinding.ManhattanU64
module.exports.MeanAbsoluteErrorF32 = nativeBinding.MeanAbsoluteErrorF32
module.exports.MeanAbsoluteErrorf32 = nativeBinding.MeanAbsoluteErrorf32
module.exports.MeanAbsoluteErrorF64 = nativeBinding.MeanAbsoluteErrorF64
module.exports.MeanAbsoluteErrorf64 = nativeBinding.MeanAbsoluteErrorf64
module.exports.MeanSquareErrorF32 = nativeBinding.MeanSquareErrorF32
module.exports.MeanSquareErrorf32 = nativeBinding.MeanSquareErrorf32
module.exports.MeanSquareErrorF64 = nativeBinding.MeanSquareErrorF64
module.exports.MeanSquareErrorf64 = nativeBinding.MeanSquareErrorf64
module.exports.MinkowskiF32 = nativeBinding.MinkowskiF32
module.exports.MinkowskiF64 = nativeBinding.MinkowskiF64
module.exports.MinkowskiI32 = nativeBinding.MinkowskiI32
module.exports.MinkowskiI64 = nativeBinding.MinkowskiI64
module.exports.MinkowskiU32 = nativeBinding.MinkowskiU32
module.exports.MinkowskiU64 = nativeBinding.MinkowskiU64
module.exports.PCAF32 = nativeBinding.PCAF32
module.exports.PCAf32 = nativeBinding.PCAf32
module.exports.PCAF64 = nativeBinding.PCAF64
module.exports.PCAf64 = nativeBinding.PCAf64
module.exports.PCAParameters = nativeBinding.PCAParameters
module.exports.PrecisionF32 = nativeBinding.PrecisionF32
module.exports.Precisionf32 = nativeBinding.Precisionf32
module.exports.PrecisionF64 = nativeBinding.PrecisionF64
module.exports.Precisionf64 = nativeBinding.Precisionf64
module.exports.R2U32 = nativeBinding.R2U32
module.exports.R2u32 = nativeBinding.R2u32
module.exports.R2U64 = nativeBinding.R2U64
module.exports.R2u64 = nativeBinding.R2u64
module.exports.RecallF32 = nativeBinding.RecallF32
module.exports.Recallf32 = nativeBinding.Recallf32
module.exports.RecallF64 = nativeBinding.RecallF64
module.exports.Recallf64 = nativeBinding.Recallf64
module.exports.RidgeRegressionF32F32 = nativeBinding.RidgeRegressionF32F32
module.exports.RidgeRegressionf32f32 = nativeBinding.RidgeRegressionf32f32
module.exports.RidgeRegressionF32U32 = nativeBinding.RidgeRegressionF32U32
module.exports.RidgeRegressionf32u32 = nativeBinding.RidgeRegressionf32u32
module.exports.RidgeRegressionF64F64 = nativeBinding.RidgeRegressionF64F64
module.exports.RidgeRegressionf64f64 = nativeBinding.RidgeRegressionf64f64
module.exports.RidgeRegressionParametersF32 = nativeBinding.RidgeRegressionParametersF32
module.exports.RidgeRegressionParametersf32 = nativeBinding.RidgeRegressionParametersf32
module.exports.RidgeRegressionParametersF64 = nativeBinding.RidgeRegressionParametersF64
module.exports.RidgeRegressionParametersf64 = nativeBinding.RidgeRegressionParametersf64
module.exports.KNNAlgorithmName = nativeBinding.KNNAlgorithmName
module.exports.KNNWeightFunction = nativeBinding.KNNWeightFunction
module.exports.LinearRegressionSolverName = nativeBinding.LinearRegressionSolverName
module.exports.LogisticRegressionSolverName = nativeBinding.LogisticRegressionSolverName
module.exports.RidgeRegressionSolverName = nativeBinding.RidgeRegressionSolverName
module.exports.trainTestSplitF32F32 = nativeBinding.trainTestSplitF32F32
module.exports.trainTestSplitF32U32 = nativeBinding.trainTestSplitF32U32
module.exports.trainTestSplitF64F64 = nativeBinding.trainTestSplitF64F64
