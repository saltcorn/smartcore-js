/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const __nodeFs = require('node:fs')
const __nodePath = require('node:path')
const { WASI: __nodeWASI } = require('node:wasi')
const { Worker } = require('node:worker_threads')

const {
  createOnMessage: __wasmCreateOnMessageForFsProxy,
  getDefaultContext: __emnapiGetDefaultContext,
  instantiateNapiModuleSync: __emnapiInstantiateNapiModuleSync,
} = require('@napi-rs/wasm-runtime')

const __rootDir = __nodePath.parse(process.cwd()).root

const __wasi = new __nodeWASI({
  version: 'preview1',
  env: process.env,
  preopens: {
    [__rootDir]: __rootDir,
  }
})

const __emnapiContext = __emnapiGetDefaultContext()

const __sharedMemory = new WebAssembly.Memory({
  initial: 4000,
  maximum: 65536,
  shared: true,
})

let __wasmFilePath = __nodePath.join(__dirname, 'smartcore-js.wasm32-wasi.wasm')
const __wasmDebugFilePath = __nodePath.join(__dirname, 'smartcore-js.wasm32-wasi.debug.wasm')

if (__nodeFs.existsSync(__wasmDebugFilePath)) {
  __wasmFilePath = __wasmDebugFilePath
} else if (!__nodeFs.existsSync(__wasmFilePath)) {
  try {
    __wasmFilePath = __nodePath.resolve('@saltcorn/smartcore-js-wasm32-wasi')
  } catch {
    throw new Error('Cannot find smartcore-js.wasm32-wasi.wasm file, and @saltcorn/smartcore-js-wasm32-wasi package is not installed.')
  }
}

const { instance: __napiInstance, module: __wasiModule, napiModule: __napiModule } = __emnapiInstantiateNapiModuleSync(__nodeFs.readFileSync(__wasmFilePath), {
  context: __emnapiContext,
  asyncWorkPoolSize: (function() {
    const threadsSizeFromEnv = Number(process.env.NAPI_RS_ASYNC_WORK_POOL_SIZE ?? process.env.UV_THREADPOOL_SIZE)
    // NaN > 0 is false
    if (threadsSizeFromEnv > 0) {
      return threadsSizeFromEnv
    } else {
      return 4
    }
  })(),
  reuseWorker: true,
  wasi: __wasi,
  onCreateWorker() {
    const worker = new Worker(__nodePath.join(__dirname, 'wasi-worker.mjs'), {
      env: process.env,
    })
    worker.onmessage = ({ data }) => {
      __wasmCreateOnMessageForFsProxy(__nodeFs)(data)
    }

    // The main thread of Node.js waits for all the active handles before exiting.
    // But Rust threads are never waited without `thread::join`.
    // So here we hack the code of Node.js to prevent the workers from being referenced (active).
    // According to https://github.com/nodejs/node/blob/19e0d472728c79d418b74bddff588bea70a403d0/lib/internal/worker.js#L415,
    // a worker is consist of two handles: kPublicPort and kHandle.
    {
      const kPublicPort = Object.getOwnPropertySymbols(worker).find(s =>
        s.toString().includes("kPublicPort")
      );
      if (kPublicPort) {
        worker[kPublicPort].ref = () => {};
      }

      const kHandle = Object.getOwnPropertySymbols(worker).find(s =>
        s.toString().includes("kHandle")
      );
      if (kHandle) {
        worker[kHandle].ref = () => {};
      }

      worker.unref();
    }
    return worker
  },
  overwriteImports(importObject) {
    importObject.env = {
      ...importObject.env,
      ...importObject.napi,
      ...importObject.emnapi,
      memory: __sharedMemory,
    }
    return importObject
  },
  beforeInit({ instance }) {
    for (const name of Object.keys(instance.exports)) {
      if (name.startsWith('__napi_register__')) {
        instance.exports[name]()
      }
    }
  },
})
module.exports = __napiModule.exports
module.exports.AccuracyF32 = __napiModule.exports.AccuracyF32
module.exports.Accuracyf32 = __napiModule.exports.Accuracyf32
module.exports.AccuracyF64 = __napiModule.exports.AccuracyF64
module.exports.Accuracyf64 = __napiModule.exports.Accuracyf64
module.exports.AccuracyU32 = __napiModule.exports.AccuracyU32
module.exports.Accuracyu32 = __napiModule.exports.Accuracyu32
module.exports.Aucf32 = __napiModule.exports.Aucf32
module.exports.AUCF32 = __napiModule.exports.AUCF32
module.exports.Boston = __napiModule.exports.Boston
module.exports.BreastCancer = __napiModule.exports.BreastCancer
module.exports.dataset = __napiModule.exports.dataset
module.exports.Dataset = __napiModule.exports.Dataset
module.exports.Datasetf32F32 = __napiModule.exports.Datasetf32F32
module.exports.Datasetf32f32 = __napiModule.exports.Datasetf32f32
module.exports.Datasetf32U32 = __napiModule.exports.Datasetf32U32
module.exports.Datasetf32u32 = __napiModule.exports.Datasetf32u32
module.exports.DenseMatrixf32 = __napiModule.exports.DenseMatrixf32
module.exports.DenseMatrixf64 = __napiModule.exports.DenseMatrixf64
module.exports.Diabetes = __napiModule.exports.Diabetes
module.exports.Digits = __napiModule.exports.Digits
module.exports.Euclidianf32 = __napiModule.exports.Euclidianf32
module.exports.Euclidianf64 = __napiModule.exports.Euclidianf64
module.exports.Euclidiani32 = __napiModule.exports.Euclidiani32
module.exports.Euclidiani64 = __napiModule.exports.Euclidiani64
module.exports.Euclidianu32 = __napiModule.exports.Euclidianu32
module.exports.Euclidianu64 = __napiModule.exports.Euclidianu64
module.exports.F1F32 = __napiModule.exports.F1F32
module.exports.Generator = __napiModule.exports.Generator
module.exports.Hammingf32 = __napiModule.exports.Hammingf32
module.exports.Hammingf64 = __napiModule.exports.Hammingf64
module.exports.Hammingi32 = __napiModule.exports.Hammingi32
module.exports.Hammingi64 = __napiModule.exports.Hammingi64
module.exports.Hammingu32 = __napiModule.exports.Hammingu32
module.exports.Hammingu64 = __napiModule.exports.Hammingu64
module.exports.HcvScoreU32 = __napiModule.exports.HcvScoreU32
module.exports.HCVScoreU32 = __napiModule.exports.HCVScoreU32
module.exports.Iris = __napiModule.exports.Iris
module.exports.KNNClassifierF32U32 = __napiModule.exports.KNNClassifierF32U32
module.exports.KNNClassifierf32u32 = __napiModule.exports.KNNClassifierf32u32
module.exports.Mahalanobisf64 = __napiModule.exports.Mahalanobisf64
module.exports.Manhattanf32 = __napiModule.exports.Manhattanf32
module.exports.Manhattanf64 = __napiModule.exports.Manhattanf64
module.exports.Manhattani32 = __napiModule.exports.Manhattani32
module.exports.Manhattani64 = __napiModule.exports.Manhattani64
module.exports.Manhattanu32 = __napiModule.exports.Manhattanu32
module.exports.Manhattanu64 = __napiModule.exports.Manhattanu64
module.exports.MeanAbsoluteErrorF32 = __napiModule.exports.MeanAbsoluteErrorF32
module.exports.MeanSquareErrorF32 = __napiModule.exports.MeanSquareErrorF32
module.exports.Minkowskif32 = __napiModule.exports.Minkowskif32
module.exports.Minkowskif64 = __napiModule.exports.Minkowskif64
module.exports.Minkowskii32 = __napiModule.exports.Minkowskii32
module.exports.Minkowskii64 = __napiModule.exports.Minkowskii64
module.exports.Minkowskiu32 = __napiModule.exports.Minkowskiu32
module.exports.Minkowskiu64 = __napiModule.exports.Minkowskiu64
module.exports.PCAF32 = __napiModule.exports.PCAF32
module.exports.PCAf32 = __napiModule.exports.PCAf32
module.exports.PCAF64 = __napiModule.exports.PCAF64
module.exports.PCAf64 = __napiModule.exports.PCAf64
module.exports.PCAParameters = __napiModule.exports.PCAParameters
module.exports.PrecisionF32 = __napiModule.exports.PrecisionF32
module.exports.R2U32 = __napiModule.exports.R2U32
module.exports.RecallF32 = __napiModule.exports.RecallF32
module.exports.RidgeRegressionF32F32 = __napiModule.exports.RidgeRegressionF32F32
module.exports.RidgeRegressionf32f32 = __napiModule.exports.RidgeRegressionf32f32
module.exports.RidgeRegressionF64F64 = __napiModule.exports.RidgeRegressionF64F64
module.exports.RidgeRegressionf64f64 = __napiModule.exports.RidgeRegressionf64f64
module.exports.RidgeRegressionParametersF32 = __napiModule.exports.RidgeRegressionParametersF32
module.exports.RidgeRegressionParametersf32 = __napiModule.exports.RidgeRegressionParametersf32
module.exports.RidgeRegressionParametersF64 = __napiModule.exports.RidgeRegressionParametersF64
module.exports.RidgeRegressionParametersf64 = __napiModule.exports.RidgeRegressionParametersf64
module.exports.RidgeRegressionSolverName = __napiModule.exports.RidgeRegressionSolverName
module.exports.trainTestSplitF32F32 = __napiModule.exports.trainTestSplitF32F32
module.exports.trainTestSplitF64F64 = __napiModule.exports.trainTestSplitF64F64
