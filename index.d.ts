/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class AccuracyF32 {
  constructor()
  getScoreF32(yTrue: Float32Array, yPred: Float32Array): number
}

export declare class Aucf32 {
  constructor()
  getScoreF32(yTrue: Float32Array, yPred: Float32Array): number
}
export type AUCF32 = Aucf32

export declare class boston {
  loadDataset(): DatasetF32F32
}
export type Boston = boston

export declare class BreastCancer {
  loadDataset(): DatasetF32U32
}

export declare class dataset {
  static boston(): boston
  static breastCancer(): BreastCancer
  static diabetes(): Diabetes
  static digits(): Digits
  static generator(): Generator
  static iris(): Iris
}
export type Dataset = dataset

export declare class DatasetF32F32 {
  get data(): Float32Array
  get target(): Float32Array
  get numSamples(): number
  get numFeatures(): number
  get featureNames(): Array<string>
  get targetNames(): Array<string>
  get description(): string
  denseMatrix(columnMajor?: boolean | undefined | null): F32DenseMatrix
}

export declare class DatasetF32U32 {
  get data(): Float32Array
  get target(): Uint32Array
  get numSamples(): number
  get numFeatures(): number
  get featureNames(): Array<string>
  get targetNames(): Array<string>
  get description(): string
  denseMatrix(columnMajor?: boolean | undefined | null): F32DenseMatrix
}

export declare class Diabetes {
  loadDataset(): DatasetF32U32
}

export declare class Digits {
  loadDataset(): DatasetF32F32
}

export declare class F1F32 {
  constructor()
  getScoreF32(yTrue: Float32Array, yPred: Float32Array): number
}

export declare class F32DenseMatrix {
  constructor(nrows: number, ncols: number, values: Float32Array, columnMajor?: boolean | undefined | null)
  noop(): void
}

export declare class F32Pca {
  constructor(data: F32DenseMatrix, parameters: PcaParameters)
  transform(x: F32DenseMatrix): F32DenseMatrix
}
export type F32PCA = F32Pca

export declare class Generator {
  makeBlobs(numSamples: number, numFeatures: number, numCenters: number): DatasetF32F32
  makeCircles(numSamples: number, factor: number, noise: number): DatasetF32U32
  makeMoons(numSamples: number, noise: number): DatasetF32U32
}

export declare class HcvScoreU32 {
  constructor()
  getScoreU32(yTrue: Uint32Array, yPred: Uint32Array): number
}
export type HCVScoreU32 = HcvScoreU32

export declare class Iris {
  loadDataset(): DatasetF32U32
}

export declare class MeanAbsoluteErrorF32 {
  constructor()
  getScoreF32(yTrue: Float32Array, yPred: Float32Array): number
}

export declare class MeanSquareErrorF32 {
  constructor()
  getScoreF32(yTrue: Float32Array, yPred: Float32Array): number
}

export declare class PcaParameters {
  constructor()
  withNComponents(nComponents: number): void
  set useCorrelationMatrix(useCorrelationMatrix: boolean)
}
export type PCAParameters = PcaParameters

export declare class PrecisionF32 {
  constructor()
  getScoreF32(yTrue: Float32Array, yPred: Float32Array): number
}

export declare class R2U32 {
  constructor()
  getScoreU32(yTrue: Uint32Array, yPred: Uint32Array): number
}

export declare class RecallF32 {
  constructor()
  getScoreF32(yTrue: Float32Array, yPred: Float32Array): number
}

export declare class RidgeRegressionF32 {
  constructor()
  static fit(x: F32DenseMatrix, y: Uint32Array, parameters: RidgeRegressionParameters): RidgeRegressionF32
}

export declare class RidgeRegressionParameters {

}

export declare function trainTestSplitF32F32(x: F32DenseMatrix, y: Float32Array, testSize: number, shuffle: boolean, seed?: bigint | undefined | null): [F32DenseMatrix, F32DenseMatrix, Float32Array, Float32Array]
