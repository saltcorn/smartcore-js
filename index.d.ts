/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class AccuracyF32 {
  constructor()
  getScore(yTrue: Float32Array, yPred: Float32Array): number
}
export type Accuracyf32 = AccuracyF32

export declare class AccuracyF64 {
  constructor()
  getScore(yTrue: Float64Array, yPred: Float64Array): number
}
export type Accuracyf64 = AccuracyF64

export declare class AccuracyU32 {
  constructor()
  getScore(yTrue: Uint32Array, yPred: Uint32Array): number
}
export type Accuracyu32 = AccuracyU32

export declare class AUCF32 {
  constructor()
  getScore(yTrue: Float32Array, yPred: Float32Array): number
}
export type AUCf32 = AUCF32

export declare class AUCF64 {
  constructor()
  getScore(yTrue: Float64Array, yPred: Float64Array): number
}
export type AUCf64 = AUCF64

export declare class Boston {
  loadDataset(): DatasetF32F32
}

export declare class BreastCancer {
  loadDataset(): DatasetF32U32
}

export declare class dataset {
  static boston(): Boston
  static breastCancer(): BreastCancer
  static diabetes(): Diabetes
  static digits(): Digits
  static generator(): Generator
  static iris(): Iris
}
export type Dataset = dataset

export declare class DatasetF32F32 {
  get data(): Float32Array
  get target(): Float32Array
  get numSamples(): number
  get numFeatures(): number
  get featureNames(): Array<string>
  get targetNames(): Array<string>
  get description(): string
  denseMatrix(columnMajor?: boolean | undefined | null): DenseMatrixF32
}

export declare class DatasetF32U32 {
  get data(): Float32Array
  get target(): Uint32Array
  get numSamples(): number
  get numFeatures(): number
  get featureNames(): Array<string>
  get targetNames(): Array<string>
  get description(): string
  denseMatrix(columnMajor?: boolean | undefined | null): DenseMatrixF32
}

export declare class DenseMatrixF32 {
  constructor(nrows: number, ncols: number, values: Float32Array, columnMajor?: boolean | undefined | null)
}

export declare class DenseMatrixF64 {
  constructor(nrows: number, ncols: number, values: Float64Array, columnMajor?: boolean | undefined | null)
}

export declare class Diabetes {
  loadDataset(): DatasetF32U32
}

export declare class Digits {
  loadDataset(): DatasetF32F32
}

export declare class Euclidianf32 {
  constructor()
  distance(x: Float32Array, y: Float32Array): number
}
export type EuclidianF32 = Euclidianf32

export declare class Euclidianf64 {
  constructor()
  distance(x: Float64Array, y: Float64Array): number
}
export type EuclidianF64 = Euclidianf64

export declare class Euclidiani32 {
  constructor()
  distance(x: Int32Array, y: Int32Array): number
}
export type EuclidianI32 = Euclidiani32

export declare class Euclidiani64 {
  constructor()
  distance(x: BigInt64Array, y: BigInt64Array): number
}
export type EuclidianI64 = Euclidiani64

export declare class Euclidianu32 {
  constructor()
  distance(x: Uint32Array, y: Uint32Array): number
}
export type EuclidianU32 = Euclidianu32

export declare class Euclidianu64 {
  constructor()
  distance(x: BigUint64Array, y: BigUint64Array): number
}
export type EuclidianU64 = Euclidianu64

export declare class F1F32 {
  constructor()
  getScore(yTrue: Float32Array, yPred: Float32Array): number
}
export type F1f32 = F1F32

export declare class F1F64 {
  constructor()
  getScore(yTrue: Float64Array, yPred: Float64Array): number
}
export type F1f64 = F1F64

export declare class Generator {
  makeBlobs(numSamples: number, numFeatures: number, numCenters: number): DatasetF32F32
  makeCircles(numSamples: number, factor: number, noise: number): DatasetF32U32
  makeMoons(numSamples: number, noise: number): DatasetF32U32
}

export declare class HammingF32 {
  constructor()
  distance(x: Float32Array, y: Float32Array): number
}

export declare class HammingF64 {
  constructor()
  distance(x: Float64Array, y: Float64Array): number
}

export declare class HammingI32 {
  constructor()
  distance(x: Int32Array, y: Int32Array): number
}

export declare class HammingI64 {
  constructor()
  distance(x: BigInt64Array, y: BigInt64Array): number
}

export declare class HammingU32 {
  constructor()
  distance(x: Uint32Array, y: Uint32Array): number
}

export declare class HammingU64 {
  constructor()
  distance(x: BigUint64Array, y: BigUint64Array): number
}

export declare class HCVScoreU32 {
  constructor()
  getScore(yTrue: Uint32Array, yPred: Uint32Array): number
}
export type HCVScoreu32 = HCVScoreU32

export declare class HCVScoreU64 {
  constructor()
  getScore(yTrue: BigUint64Array, yPred: BigUint64Array): number
}
export type HCVScoreu64 = HCVScoreU64

export declare class Iris {
  loadDataset(): DatasetF32U32
}

export declare class KNNClassifierF32U32 {
  static fit(x: DenseMatrixF32, y: Uint32Array): KNNClassifierF32U32
  predict(x: DenseMatrixF32): Uint32Array
}
export type KNNClassifierf32u32 = KNNClassifierF32U32

export declare class KNNRegressorParametersF32EuclidianF32 {
  withK(k: number): void
  withAlgorithm(algorithm: KNNAlgorithmName): void
  static withWeight(weight: KNNWeightFunction): KNNRegressorParametersF32EuclidianF32
  constructor()
  static withDistanceHammingF32(distance: HammingF32): KNNRegressorParametersF32EuclidianF32
}
export type EuclidianF32KNNRegressorParametersf32 = KNNRegressorParametersF32EuclidianF32

export declare class KNNRegressorParametersF32HammingF32 {
  withK(k: number): void
  withAlgorithm(algorithm: KNNAlgorithmName): void
  static withWeight(weight: KNNWeightFunction): KNNRegressorParametersF32HammingF32
}
export type HammingF32KNNRegressorParametersf32 = KNNRegressorParametersF32HammingF32

export declare class LogisticRegressionF32U32 {
  constructor()
  static fit(x: DenseMatrixF32, y: Uint32Array, parameters: LogisticRegressionParametersF32): LogisticRegressionF32U32
  predict(x: DenseMatrixF32): Uint32Array
}
export type LogisticRegressionf32u32 = LogisticRegressionF32U32

export declare class LogisticRegressionF64U64 {
  constructor()
  static fit(x: DenseMatrixF64, y: BigUint64Array, parameters: LogisticRegressionParametersF64): LogisticRegressionF64U64
  predict(x: DenseMatrixF64): BigUint64Array
}
export type LogisticRegressionf64u64 = LogisticRegressionF64U64

export declare class LogisticRegressionParametersF32 {
  constructor()
  withAlpha(alpha: number): void
  withSolver(solver: LogisticRegressionSolverName): void
}
export type LogisticRegressionParametersf32 = LogisticRegressionParametersF32

export declare class LogisticRegressionParametersF64 {
  constructor()
  withAlpha(alpha: number): void
  withSolver(solver: LogisticRegressionSolverName): void
}
export type LogisticRegressionParametersf64 = LogisticRegressionParametersF64

export declare class MahalanobisF64 {
  constructor(data: DenseMatrixF64)
  distance(x: Float64Array, y: Float64Array): number
}

export declare class ManhattanF32 {
  constructor()
  distance(x: Float32Array, y: Float32Array): number
}

export declare class ManhattanF64 {
  constructor()
  distance(x: Float64Array, y: Float64Array): number
}

export declare class ManhattanI32 {
  constructor()
  distance(x: Int32Array, y: Int32Array): number
}

export declare class ManhattanI64 {
  constructor()
  distance(x: BigInt64Array, y: BigInt64Array): number
}

export declare class ManhattanU32 {
  constructor()
  distance(x: Uint32Array, y: Uint32Array): number
}

export declare class ManhattanU64 {
  constructor()
  distance(x: BigUint64Array, y: BigUint64Array): number
}

export declare class MeanAbsoluteErrorF32 {
  constructor()
  getScore(yTrue: Float32Array, yPred: Float32Array): number
}
export type MeanAbsoluteErrorf32 = MeanAbsoluteErrorF32

export declare class MeanAbsoluteErrorF64 {
  constructor()
  getScore(yTrue: Float64Array, yPred: Float64Array): number
}
export type MeanAbsoluteErrorf64 = MeanAbsoluteErrorF64

export declare class MeanSquareErrorF32 {
  constructor()
  getScore(yTrue: Float32Array, yPred: Float32Array): number
}
export type MeanSquareErrorf32 = MeanSquareErrorF32

export declare class MeanSquareErrorF64 {
  constructor()
  getScore(yTrue: Float64Array, yPred: Float64Array): number
}
export type MeanSquareErrorf64 = MeanSquareErrorF64

export declare class MinkowskiF32 {
  constructor(p: number)
  distance(x: Float32Array, y: Float32Array): number
}

export declare class MinkowskiF64 {
  constructor(p: number)
  distance(x: Float64Array, y: Float64Array): number
}

export declare class MinkowskiI32 {
  constructor(p: number)
  distance(x: Int32Array, y: Int32Array): number
}

export declare class MinkowskiI64 {
  constructor(p: number)
  distance(x: BigInt64Array, y: BigInt64Array): number
}

export declare class MinkowskiU32 {
  constructor(p: number)
  distance(x: Uint32Array, y: Uint32Array): number
}

export declare class MinkowskiU64 {
  constructor(p: number)
  distance(x: BigUint64Array, y: BigUint64Array): number
}

export declare class PCAF32 {
  constructor(data: DenseMatrixF32, parameters: PCAParameters)
  transform(x: DenseMatrixF32): DenseMatrixF32
}
export type PCAf32 = PCAF32

export declare class PCAF64 {
  constructor(data: DenseMatrixF64, parameters: PCAParameters)
  transform(x: DenseMatrixF64): DenseMatrixF64
}
export type PCAf64 = PCAF64

export declare class PCAParameters {
  constructor()
  withNComponents(nComponents: number): void
  set useCorrelationMatrix(useCorrelationMatrix: boolean)
}

export declare class PrecisionF32 {
  constructor()
  getScore(yTrue: Float32Array, yPred: Float32Array): number
}
export type Precisionf32 = PrecisionF32

export declare class PrecisionF64 {
  constructor()
  getScore(yTrue: Float64Array, yPred: Float64Array): number
}
export type Precisionf64 = PrecisionF64

export declare class R2U32 {
  constructor()
  getScore(yTrue: Uint32Array, yPred: Uint32Array): number
}
export type R2u32 = R2U32

export declare class R2U64 {
  constructor()
  getScore(yTrue: BigUint64Array, yPred: BigUint64Array): number
}
export type R2u64 = R2U64

export declare class RecallF32 {
  constructor()
  getScore(yTrue: Float32Array, yPred: Float32Array): number
}
export type Recallf32 = RecallF32

export declare class RecallF64 {
  constructor()
  getScore(yTrue: Float64Array, yPred: Float64Array): number
}
export type Recallf64 = RecallF64

export declare class RidgeRegressionF32F32 {
  constructor()
  static fit(x: DenseMatrixF32, y: Float32Array, parameters: RidgeRegressionParametersF32): RidgeRegressionF32F32
  predict(x: DenseMatrixF32): Float32Array
}
export type RidgeRegressionf32f32 = RidgeRegressionF32F32

export declare class RidgeRegressionF32U32 {
  constructor()
  static fit(x: DenseMatrixF32, y: Uint32Array, parameters: RidgeRegressionParametersF32): RidgeRegressionF32U32
  predict(x: DenseMatrixF32): Uint32Array
}
export type RidgeRegressionf32u32 = RidgeRegressionF32U32

export declare class RidgeRegressionF64F64 {
  constructor()
  static fit(x: DenseMatrixF64, y: Float64Array, parameters: RidgeRegressionParametersF64): RidgeRegressionF64F64
  predict(x: DenseMatrixF64): Float64Array
}
export type RidgeRegressionf64f64 = RidgeRegressionF64F64

export declare class RidgeRegressionParametersF32 {
  constructor()
  withAlpha(alpha: number): void
  withNormalize(normalize: boolean): void
  withSolver(solver: RidgeRegressionSolverName): void
}
export type RidgeRegressionParametersf32 = RidgeRegressionParametersF32

export declare class RidgeRegressionParametersF64 {
  constructor()
  withAlpha(alpha: number): void
  withNormalize(normalize: boolean): void
  withSolver(solver: RidgeRegressionSolverName): void
}
export type RidgeRegressionParametersf64 = RidgeRegressionParametersF64

export declare const enum KNNAlgorithmName {
  LinearSearch = 0,
  CoverTree = 1
}

export declare const enum KNNWeightFunction {
  Uniform = 0,
  Distance = 1
}

export declare const enum LogisticRegressionSolverName {
  LBFGS = 0
}

export declare const enum RidgeRegressionSolverName {
  Cholesky = 0,
  Svd = 1
}

export declare function trainTestSplitF32F32(x: DenseMatrixF32, y: Float32Array, testSize: number, shuffle: boolean, seed?: bigint | undefined | null): [DenseMatrixF32, DenseMatrixF32, Float32Array, Float32Array]

export declare function trainTestSplitF32U32(x: DenseMatrixF32, y: Uint32Array, testSize: number, shuffle: boolean, seed?: bigint | undefined | null): [DenseMatrixF32, DenseMatrixF32, Uint32Array, Uint32Array]

export declare function trainTestSplitF64F64(x: DenseMatrixF64, y: Float64Array, testSize: number, shuffle: boolean, seed?: bigint | undefined | null): [DenseMatrixF64, DenseMatrixF64, Float64Array, Float64Array]
